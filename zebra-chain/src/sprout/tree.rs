//! Note Commitment Trees.
//!
//! A note commitment tree is an incremental Merkle tree of fixed depth
//! used to store note commitments that JoinSplit transfers or Spend
//! transfers produce. Just as the unspent transaction output set (UTXO
//! set) used in Bitcoin, it is used to express the existence of value and
//! the capability to spend it. However, unlike the UTXO set, it is not
//! the job of this tree to protect against double-spending, as it is
//! append-only.
//!
//! A root of a note commitment tree is associated with each treestate.
#![allow(clippy::unit_arg)]

use std::fmt;

use byteorder::{ByteOrder, LittleEndian};
use lazy_static::lazy_static;
#[cfg(any(test, feature = "proptest-impl"))]
use proptest_derive::Arbitrary;
use sha2::digest::generic_array::GenericArray;

use super::commitment::NoteCommitment;

const MERKLE_DEPTH: usize = 29;

/// MerkleCRH^Sprout Hash Function
///
/// MerkleCRH^Sprout(layer, left, right) := SHA256Compress(left || right)
///
/// `layer` is unused for Sprout but used for the Sapling equivalent.
///
/// https://zips.z.cash/protocol/protocol.pdf#merklecrh
fn merkle_crh_sprout(left: [u8; 32], right: [u8; 32]) -> [u8; 32] {
    let mut other_block = [0u8; 64];
    other_block[..32].copy_from_slice(&left[..]);
    other_block[32..].copy_from_slice(&right[..]);

    let mut state = [0u32; 8];
    sha2::compress256(&mut state, &[GenericArray::clone_from_slice(&other_block)]);

    let mut derived_bytes = [0u8; 32];
    LittleEndian::write_u32_into(&state, &mut derived_bytes);

    derived_bytes
}

lazy_static! {
    /// Sprout note commitment trees have a max depth of 29.
    ///
    /// https://zips.z.cash/protocol/canopy.pdf#constants
    static ref EMPTY_ROOTS: Vec<[u8; 32]> = {
        // Uncommitted^Sprout = = [0]^l_MerkleSprout
        let mut v = vec![[0u8; 32]];

        for d in 0..MERKLE_DEPTH {

            let next = merkle_crh_sprout(v[d], v[d]);
            v.push(next);
        }

        v
    };
}

/// The index of a noteâ€™s commitment at the leafmost layer of its Note
/// Commitment Tree.
///
/// https://zips.z.cash/protocol/protocol.pdf#merkletree
pub struct Position(pub(crate) u64);

/// Sprout note commitment tree root node hash.
///
/// The root hash in LEBS2OSP256(rt) encoding of the Sprout note
/// commitment tree corresponding to the final Sprout treestate of
/// this block. A root of a note commitment tree is associated with
/// each treestate.
#[derive(Clone, Copy, Default, Eq, PartialEq, Serialize, Deserialize, Hash)]
#[cfg_attr(any(test, feature = "proptest-impl"), derive(Arbitrary))]
pub struct Root([u8; 32]);

impl fmt::Debug for Root {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.debug_tuple("Root").field(&hex::encode(&self.0)).finish()
    }
}

impl From<[u8; 32]> for Root {
    fn from(bytes: [u8; 32]) -> Root {
        Self(bytes)
    }
}

impl From<Root> for [u8; 32] {
    fn from(rt: Root) -> [u8; 32] {
        rt.0
    }
}

/// Sprout Note Commitment Tree
#[derive(Clone, Debug, Default, Eq, PartialEq)]
#[cfg_attr(test, derive(Arbitrary))]
struct NoteCommitmentTree {
    /// The root node of the tree (often used as an anchor).
    root: Root,
    /// The height of the tree (maximum height for Sprout is 29).
    height: u8,
    /// The number of leaves (note commitments) in this tree.
    count: u32,
}

impl From<Vec<NoteCommitment>> for NoteCommitmentTree {
    fn from(values: Vec<NoteCommitment>) -> Self {
        if values.is_empty() {
            return NoteCommitmentTree {
                root: Root::default(),
                height: 0,
                count: 0,
            };
        }

        let count = values.len() as u32;
        let mut height = 0u8;
        let mut current_layer: Vec<[u8; 32]> = values.into_iter().map(|cm| cm.into()).collect();

        while usize::from(height) < MERKLE_DEPTH {
            let mut next_layer_up = vec![];

            while !current_layer.is_empty() {
                let left = current_layer.remove(0);
                let right;
                if current_layer.is_empty() {
                    right = EMPTY_ROOTS[height as usize];
                } else {
                    right = current_layer.remove(0);
                }
                next_layer_up.push(merkle_crh_sprout(left, right));
            }

            height += 1;
            current_layer = next_layer_up;
        }

        assert!(current_layer.len() == 1);

        NoteCommitmentTree {
            root: Root(current_layer.remove(0)),
            height,
            count,
        }
    }
}

impl NoteCommitmentTree {
    /// Get the Jubjub-based Pedersen hash of root node of this merkle tree of
    /// commitment notes.
    pub fn hash(&self) -> [u8; 32] {
        self.root.0
    }
}

#[cfg(test)]
mod tests {

    use super::*;

    // From https://github.com/zcash/zcash/blob/master/src/zcash/IncrementalMerkleTree.cpp#L439
    const HEX_EMPTY_ROOTS: [[u8; 32]; 66] = [
        [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
        ],
        [
            0xda, 0x56, 0x98, 0xbe, 0x17, 0xb9, 0xb4, 0x69, 0x62, 0x33, 0x57, 0x99, 0x77, 0x9f,
            0xbe, 0xca, 0x8c, 0xe5, 0xd4, 0x91, 0xc0, 0xd2, 0x62, 0x43, 0xba, 0xfe, 0xf9, 0xea,
            0x18, 0x37, 0xa9, 0xd8,
        ],
        [
            0xdc, 0x76, 0x6f, 0xab, 0x49, 0x2c, 0xcf, 0x3d, 0x1e, 0x49, 0xd4, 0xf3, 0x74, 0xb5,
            0x23, 0x5f, 0xa5, 0x65, 0x06, 0xaa, 0xc2, 0x22, 0x4d, 0x39, 0xf9, 0x43, 0xfc, 0xd4,
            0x92, 0x02, 0x97, 0x4c,
        ],
        [
            0x3f, 0x0a, 0x40, 0x61, 0x81, 0x10, 0x59, 0x68, 0xfd, 0xae, 0xe3, 0x06, 0x79, 0xe3,
            0x27, 0x3c, 0x66, 0xb7, 0x2b, 0xf9, 0xa7, 0xf5, 0xde, 0xbb, 0xf3, 0xb5, 0xa0, 0xa2,
            0x6e, 0x35, 0x9f, 0x92,
        ],
        [
            0x26, 0xb0, 0x05, 0x26, 0x94, 0xfc, 0x42, 0xfd, 0xff, 0x93, 0xe6, 0xfb, 0x5a, 0x71,
            0xd3, 0x8c, 0x3d, 0xd7, 0xdc, 0x5b, 0x6a, 0xd7, 0x10, 0xeb, 0x04, 0x8c, 0x66, 0x02,
            0x33, 0x13, 0x7f, 0xab,
        ],
        [
            0x01, 0x09, 0xec, 0xc0, 0x72, 0x26, 0x59, 0xff, 0x83, 0x45, 0x0b, 0x8f, 0x7b, 0x88,
            0x46, 0xe6, 0x7b, 0x28, 0x59, 0xf3, 0x3c, 0x30, 0xd9, 0xb7, 0xac, 0xd5, 0xbf, 0x39,
            0xca, 0xe5, 0x4e, 0x31,
        ],
        [
            0x3f, 0x90, 0x9b, 0x8c, 0xe3, 0xd7, 0xff, 0xd8, 0xa5, 0xb3, 0x09, 0x08, 0xf6, 0x05,
            0xa0, 0x3b, 0x0d, 0xb8, 0x51, 0x69, 0x55, 0x8d, 0xdc, 0x1d, 0xa7, 0xbb, 0xbc, 0xc9,
            0xb0, 0x9f, 0xd3, 0x25,
        ],
        [
            0x40, 0x46, 0x0f, 0xa6, 0xbc, 0x69, 0x2a, 0x06, 0xf4, 0x75, 0x21, 0xa6, 0x72, 0x5a,
            0x54, 0x7c, 0x02, 0x8a, 0x6a, 0x24, 0x0d, 0x84, 0x09, 0xf1, 0x65, 0xe6, 0x3c, 0xb5,
            0x4d, 0xa2, 0xd2, 0x3f,
        ],
        [
            0x8c, 0x08, 0x56, 0x74, 0x24, 0x9b, 0x43, 0xda, 0x1b, 0x9a, 0x31, 0xa0, 0xe8, 0x20,
            0xe8, 0x1e, 0x75, 0xf3, 0x42, 0x80, 0x7b, 0x03, 0xb6, 0xb9, 0xe6, 0x49, 0x83, 0x21,
            0x7b, 0xc2, 0xb3, 0x8e,
        ],
        [
            0xa0, 0x83, 0x45, 0x0c, 0x1b, 0xa2, 0xa3, 0xa7, 0xbe, 0x76, 0xfa, 0xd9, 0xd1, 0x3b,
            0xc3, 0x7b, 0xe4, 0xbf, 0x83, 0xbd, 0x3e, 0x59, 0xfc, 0x37, 0x5a, 0x36, 0xba, 0x62,
            0xdc, 0x62, 0x02, 0x98,
        ],
        [
            0x1d, 0xdd, 0xda, 0xbc, 0x2c, 0xaa, 0x2d, 0xe9, 0xef, 0xf9, 0xe1, 0x8c, 0x8c, 0x5a,
            0x39, 0x40, 0x6d, 0x79, 0x36, 0xe8, 0x89, 0xbc, 0x16, 0xcf, 0xab, 0xb1, 0x44, 0xf5,
            0xc0, 0x02, 0x26, 0x82,
        ],
        [
            0xc2, 0x2d, 0x8f, 0x0b, 0x5e, 0x40, 0x56, 0xe5, 0xf3, 0x18, 0xba, 0x22, 0x09, 0x1c,
            0xc0, 0x7d, 0xb5, 0x69, 0x4f, 0xbe, 0xb5, 0xe8, 0x7e, 0xf0, 0xd7, 0xe2, 0xc5, 0x7c,
            0xa3, 0x52, 0x35, 0x9e,
        ],
        [
            0x89, 0xa4, 0x34, 0xae, 0x1f, 0xeb, 0xd7, 0x68, 0x7e, 0xce, 0xea, 0x21, 0xd0, 0x7f,
            0x20, 0xa2, 0x51, 0x24, 0x49, 0xd0, 0x8c, 0xe2, 0xee, 0xe5, 0x58, 0x71, 0xcd, 0xb9,
            0xd4, 0x6c, 0x12, 0x33,
        ],
        [
            0x73, 0x33, 0xdb, 0xff, 0xbd, 0x11, 0xf0, 0x92, 0x47, 0xa2, 0xb3, 0x3a, 0x01, 0x3e,
            0xc4, 0xc4, 0x34, 0x20, 0x29, 0xd8, 0x51, 0xe2, 0x2b, 0xa4, 0x85, 0xd4, 0x46, 0x18,
            0x51, 0x37, 0x0c, 0x15,
        ],
        [
            0x5d, 0xad, 0x84, 0x4a, 0xb9, 0x46, 0x6b, 0x70, 0xf7, 0x45, 0x13, 0x71, 0x95, 0xca,
            0x22, 0x1b, 0x48, 0xf3, 0x46, 0xab, 0xd1, 0x45, 0xfb, 0x5e, 0xfc, 0x23, 0xa8, 0xb4,
            0xba, 0x50, 0x80, 0x22,
        ],
        [
            0x50, 0x7e, 0x0d, 0xae, 0x81, 0xcb, 0xfb, 0xe4, 0x57, 0xfd, 0x37, 0x0e, 0xf1, 0xca,
            0x42, 0x01, 0xc2, 0xb6, 0x40, 0x10, 0x83, 0xdd, 0xab, 0x44, 0x0e, 0x4a, 0x03, 0x8d,
            0xc1, 0xe3, 0x58, 0xc4,
        ],
        [
            0xbd, 0xcd, 0xb3, 0x29, 0x31, 0x88, 0xc9, 0x80, 0x7d, 0x80, 0x82, 0x67, 0x01, 0x86,
            0x84, 0xcf, 0xec, 0xe0, 0x7a, 0xc3, 0x5a, 0x42, 0xc0, 0x0f, 0x2c, 0x79, 0xb4, 0x00,
            0x38, 0x25, 0x30, 0x5d,
        ],
        [
            0xba, 0xb5, 0x80, 0x09, 0x72, 0xa1, 0x6c, 0x2c, 0x22, 0x53, 0x0c, 0x66, 0x06, 0x6d,
            0x0a, 0x58, 0x67, 0xe9, 0x87, 0xbe, 0xd2, 0x1a, 0x6d, 0x5a, 0x45, 0x0b, 0x68, 0x3c,
            0xf1, 0xcf, 0xd7, 0x09,
        ],
        [
            0x11, 0xaa, 0x0b, 0x4a, 0xd2, 0x9b, 0x13, 0xb0, 0x57, 0xa3, 0x16, 0x19, 0xd6, 0x50,
            0x0d, 0x63, 0x6c, 0xd7, 0x35, 0xcd, 0xd0, 0x7d, 0x81, 0x1e, 0xa2, 0x65, 0xec, 0x4b,
            0xcb, 0xbb, 0xd0, 0x58,
        ],
        [
            0x51, 0x45, 0xb1, 0xb0, 0x55, 0xc2, 0xdf, 0x02, 0xb9, 0x56, 0x75, 0xe3, 0x79, 0x7b,
            0x91, 0xde, 0x1b, 0x84, 0x6d, 0x25, 0x00, 0x3c, 0x0a, 0x80, 0x3d, 0x08, 0x90, 0x07,
            0x28, 0xf2, 0xcd, 0x6a,
        ],
        [
            0x03, 0x23, 0xf2, 0x85, 0x0b, 0xf3, 0x44, 0x4f, 0x4b, 0x4c, 0x5c, 0x09, 0xa6, 0x05,
            0x7e, 0xc7, 0x16, 0x91, 0x90, 0xf4, 0x5a, 0xcb, 0x9e, 0x46, 0x98, 0x4a, 0xb3, 0xdf,
            0xce, 0xc4, 0xf0, 0x6a,
        ],
        [
            0x67, 0x15, 0x46, 0xe2, 0x6b, 0x1d, 0xa1, 0xaf, 0x75, 0x45, 0x31, 0xe2, 0x6d, 0x8a,
            0x6a, 0x51, 0x07, 0x3a, 0x57, 0xdd, 0xd7, 0x2d, 0xc4, 0x72, 0xef, 0xb4, 0x3f, 0xcb,
            0x25, 0x7c, 0xff, 0xff,
        ],
        [
            0xbb, 0x23, 0xa9, 0xbb, 0xa5, 0x6d, 0xe5, 0x7c, 0xb2, 0x84, 0xb0, 0xd2, 0xb0, 0x1c,
            0x64, 0x2c, 0xf7, 0x9c, 0x9a, 0x55, 0x63, 0xf0, 0x06, 0x7a, 0x21, 0x29, 0x24, 0x12,
            0x14, 0x5b, 0xd7, 0x8a,
        ],
        [
            0xf3, 0x0c, 0xc8, 0x36, 0xb9, 0xf7, 0x1b, 0x4e, 0x7e, 0xe3, 0xc7, 0x2b, 0x1f, 0xd2,
            0x53, 0x26, 0x8a, 0xf9, 0xa2, 0x7e, 0x9d, 0x72, 0x91, 0xa2, 0x3d, 0x02, 0x82, 0x1b,
            0x21, 0xdd, 0xfd, 0x16,
        ],
        [
            0x58, 0xa2, 0x75, 0x3d, 0xad, 0xe1, 0x03, 0xce, 0xcb, 0xcd, 0xa5, 0x0b, 0x5e, 0xbf,
            0xce, 0x31, 0xe1, 0x2d, 0x41, 0xd5, 0x84, 0x1d, 0xcc, 0x95, 0x62, 0x0f, 0x7b, 0x3d,
            0x50, 0xa1, 0xb9, 0xa1,
        ],
        [
            0x92, 0x5e, 0x6d, 0x47, 0x4a, 0x5d, 0x8d, 0x30, 0x04, 0xf2, 0x9d, 0xa0, 0xdd, 0x78,
            0xd3, 0x0a, 0xe3, 0x82, 0x4c, 0xe7, 0x9d, 0xfe, 0x49, 0x34, 0xbb, 0x29, 0xec, 0x3a,
            0xfa, 0xf3, 0xd5, 0x21,
        ],
        [
            0x08, 0xf2, 0x79, 0x61, 0x86, 0x16, 0xbc, 0xdd, 0x4e, 0xad, 0xc9, 0xc7, 0xa9, 0x06,
            0x26, 0x91, 0xa5, 0x9b, 0x43, 0xb0, 0x7e, 0x2c, 0x1e, 0x23, 0x7f, 0x17, 0xbd, 0x18,
            0x9c, 0xd6, 0xa8, 0xfe,
        ],
        [
            0xc9, 0x2b, 0x32, 0xdb, 0x42, 0xf4, 0x2e, 0x2b, 0xf0, 0xa5, 0x9d, 0xf9, 0x05, 0x5b,
            0xe5, 0xc6, 0x69, 0xd3, 0x24, 0x2d, 0xf4, 0x53, 0x57, 0x65, 0x9b, 0x75, 0xae, 0x2c,
            0x27, 0xa7, 0x6f, 0x50,
        ],
        [
            0xc0, 0xdb, 0x2a, 0x74, 0x99, 0x8c, 0x50, 0xeb, 0x7b, 0xa6, 0x53, 0x4f, 0x6d, 0x41,
            0x0e, 0xfc, 0x27, 0xc4, 0xbb, 0x88, 0xac, 0xb0, 0x22, 0x2c, 0x79, 0x06, 0xea, 0x28,
            0xa3, 0x27, 0xb5, 0x11,
        ],
        [
            0xd7, 0xc6, 0x12, 0xc8, 0x17, 0x79, 0x31, 0x91, 0xa1, 0xe6, 0x86, 0x52, 0x12, 0x18,
            0x76, 0xd6, 0xb3, 0xbd, 0xe4, 0x0f, 0x4f, 0xa5, 0x2b, 0xc3, 0x14, 0x14, 0x5c, 0xe6,
            0xe5, 0xcd, 0xd2, 0x59,
        ],
        [
            0xb2, 0x23, 0x70, 0x10, 0x6c, 0x67, 0xa1, 0x72, 0x09, 0xf6, 0x13, 0x0b, 0xc0, 0x9f,
            0x73, 0x5d, 0x83, 0xaa, 0x2c, 0x04, 0xfc, 0x4f, 0xe7, 0x2e, 0xa5, 0xd8, 0x0b, 0x21,
            0x67, 0x23, 0xe7, 0xce,
        ],
        [
            0x9f, 0x67, 0xd5, 0xf6, 0x64, 0x66, 0x4c, 0x90, 0x19, 0x40, 0xee, 0xe3, 0xd0, 0x2d,
            0xd5, 0xb3, 0xe4, 0xb9, 0x2e, 0x7b, 0x42, 0x82, 0x0c, 0x42, 0xfc, 0x51, 0x59, 0xe9,
            0x1b, 0x41, 0x17, 0x2a,
        ],
        [
            0xac, 0x58, 0xcd, 0x13, 0x88, 0xfe, 0xc2, 0x90, 0xd3, 0x98, 0xf1, 0x94, 0x4b, 0x56,
            0x44, 0x49, 0xa6, 0x3c, 0x81, 0x58, 0x80, 0x56, 0x6b, 0xd1, 0xd1, 0x89, 0xf7, 0x83,
            0x9e, 0x3b, 0x0c, 0x8c,
        ],
        [
            0x56, 0x98, 0xea, 0xe7, 0xc8, 0x51, 0x5e, 0xd0, 0x5a, 0x70, 0x33, 0x9b, 0xdf, 0x7c,
            0x10, 0x28, 0xe7, 0xac, 0xca, 0x13, 0xa4, 0xfa, 0x97, 0xd9, 0x53, 0x8f, 0x01, 0xac,
            0x8d, 0x88, 0x9a, 0xe3,
        ],
        [
            0x2d, 0x49, 0x95, 0x77, 0x0a, 0x76, 0xfb, 0x93, 0x31, 0x4c, 0xa7, 0x4b, 0x35, 0x24,
            0xea, 0x1d, 0xb5, 0x68, 0x8a, 0xd0, 0xa7, 0x61, 0x83, 0xea, 0x17, 0x20, 0x4a, 0x8f,
            0x02, 0x4a, 0x9f, 0x3b,
        ],
        [
            0x5e, 0x89, 0x92, 0xc1, 0xb0, 0x72, 0xc1, 0x6e, 0x9e, 0x28, 0xa8, 0x53, 0x58, 0xfb,
            0x5f, 0xb6, 0x90, 0x1a, 0x81, 0x58, 0x77, 0x66, 0xda, 0xdb, 0x7a, 0xa0, 0xb9, 0x73,
            0xde, 0xd2, 0xf2, 0x64,
        ],
        [
            0xe9, 0x5d, 0xb7, 0x1e, 0x1f, 0x72, 0x91, 0xba, 0x54, 0x99, 0x46, 0x1b, 0xc7, 0x15,
            0x20, 0x3e, 0x29, 0xb8, 0x4b, 0xfa, 0x42, 0x83, 0xe3, 0xbb, 0x7f, 0x47, 0x0a, 0x15,
            0xd0, 0xe1, 0x58, 0x4e,
        ],
        [
            0x41, 0xf0, 0x78, 0xbd, 0x18, 0x24, 0xc8, 0xa4, 0xb7, 0x19, 0x64, 0xf3, 0x94, 0xaa,
            0x59, 0x50, 0x84, 0xd8, 0xeb, 0x17, 0xb9, 0x7a, 0x36, 0x30, 0x43, 0x3a, 0xf7, 0x0d,
            0x10, 0xe0, 0xef, 0xf6,
        ],
        [
            0xa1, 0x91, 0x3f, 0xe6, 0xb2, 0x01, 0x32, 0x31, 0x2f, 0x8c, 0x1f, 0x00, 0xdd, 0xd6,
            0x3c, 0xec, 0x7a, 0x03, 0xf5, 0xf1, 0xd7, 0xd8, 0x34, 0x92, 0xfa, 0x28, 0x4c, 0x0b,
            0x5d, 0x63, 0x20, 0xb0,
        ],
        [
            0xba, 0x94, 0x40, 0xc4, 0xdb, 0xfc, 0xf5, 0x5c, 0xeb, 0x60, 0x5a, 0x5b, 0x89, 0x90,
            0xfc, 0x11, 0xf8, 0xef, 0x22, 0x87, 0x0d, 0x8d, 0x12, 0xe1, 0x30, 0xf9, 0x86, 0x49,
            0x1e, 0xae, 0x84, 0xb3,
        ],
        [
            0x49, 0xdb, 0x2d, 0x5e, 0x22, 0xb8, 0x01, 0x5c, 0xae, 0x48, 0x10, 0xd7, 0x5e, 0x54,
            0x01, 0x4c, 0x54, 0x69, 0x86, 0x27, 0x38, 0xe1, 0x61, 0xec, 0x96, 0xec, 0x20, 0x21,
            0x87, 0x18, 0x82, 0x8a,
        ],
        [
            0xd4, 0x85, 0x1f, 0xb8, 0x43, 0x1e, 0xdf, 0xbb, 0x8b, 0x1e, 0x85, 0xad, 0xa6, 0x89,
            0x59, 0x67, 0xc2, 0xda, 0xc8, 0x7d, 0xf3, 0x44, 0x99, 0x2a, 0x05, 0xfa, 0xf1, 0xec,
            0xf8, 0x36, 0xee, 0xc9,
        ],
        [
            0xe4, 0xab, 0x9f, 0x44, 0x70, 0xf0, 0x0c, 0xd1, 0x96, 0xd4, 0x7c, 0x75, 0xc8, 0x2e,
            0x7a, 0xda, 0xf0, 0x6f, 0xe1, 0x7e, 0x04, 0x2e, 0x39, 0x53, 0xd9, 0x3b, 0xb5, 0xd5,
            0x6d, 0x8c, 0xd8, 0xfb,
        ],
        [
            0x7e, 0x43, 0x20, 0x43, 0x48, 0x49, 0xec, 0xb3, 0x57, 0xf1, 0xaf, 0xaa, 0xba, 0x21,
            0xa5, 0x44, 0x00, 0xef, 0x2d, 0x11, 0xcf, 0xf8, 0x3b, 0x93, 0x7d, 0x87, 0xfd, 0xaf,
            0xa4, 0x9f, 0x81, 0x99,
        ],
        [
            0x02, 0x0a, 0xdc, 0x98, 0xd9, 0x6c, 0xfb, 0xbc, 0xca, 0x15, 0xfc, 0x3a, 0xa0, 0x37,
            0x60, 0xed, 0x28, 0x66, 0x86, 0xc3, 0x5b, 0x5d, 0x92, 0xc7, 0xcb, 0x64, 0xa9, 0x99,
            0xb3, 0x94, 0xa8, 0x54,
        ],
        [
            0x3a, 0x26, 0xb2, 0x9f, 0xe1, 0xac, 0xfd, 0xd6, 0xc6, 0xa1, 0x51, 0xbc, 0xc3, 0xdb,
            0xcb, 0x95, 0xa1, 0x0e, 0xbe, 0x2f, 0x05, 0x53, 0xf8, 0x07, 0x79, 0x56, 0x9b, 0x67,
            0xb7, 0x24, 0x4e, 0x77,
        ],
        [
            0xec, 0x2d, 0x09, 0x86, 0xe6, 0xa0, 0xdd, 0xf4, 0x38, 0x97, 0xb2, 0xd4, 0xf2, 0x3b,
            0xb0, 0x34, 0xf5, 0x38, 0xff, 0xe0, 0x08, 0x27, 0xf3, 0x10, 0xdc, 0x49, 0x63, 0xf3,
            0x26, 0x7f, 0x0b, 0xfb,
        ],
        [
            0xd4, 0x80, 0x73, 0xf8, 0x81, 0x9f, 0x81, 0xf0, 0x35, 0x8e, 0x3f, 0xc3, 0x5a, 0x04,
            0x7c, 0xc7, 0x40, 0x82, 0xae, 0x1c, 0xb7, 0xee, 0x22, 0xfb, 0x60, 0x9c, 0x01, 0x64,
            0x93, 0x42, 0xd0, 0xe6,
        ],
        [
            0xad, 0x80, 0x37, 0x60, 0x17, 0x93, 0xf1, 0x72, 0x44, 0x1e, 0xcb, 0x00, 0xdc, 0x13,
            0x8d, 0x9f, 0xc5, 0x95, 0x71, 0x25, 0xec, 0xc3, 0x82, 0xec, 0x65, 0xe3, 0x6f, 0x81,
            0x7d, 0xc7, 0x99, 0xfb,
        ],
        [
            0xca, 0x50, 0x0a, 0x54, 0x41, 0xf3, 0x6f, 0x4d, 0xf6, 0x73, 0xd6, 0xb8, 0xed, 0x07,
            0x5d, 0x36, 0xda, 0xe2, 0xc7, 0xe6, 0x48, 0x14, 0x28, 0xc7, 0x0a, 0x5a, 0x76, 0xb7,
            0xa9, 0xbe, 0xbc, 0xe8,
        ],
        [
            0x42, 0x2b, 0x6d, 0xdd, 0x47, 0x32, 0x31, 0xdc, 0x4d, 0x56, 0xfe, 0x91, 0x34, 0x44,
            0xcc, 0xd5, 0x6f, 0x7c, 0x61, 0xf7, 0x47, 0xba, 0x57, 0xca, 0x94, 0x6d, 0x5f, 0xef,
            0x72, 0xd8, 0x40, 0xa0,
        ],
        [
            0xab, 0x41, 0xf4, 0xec, 0xb7, 0xd7, 0x08, 0x96, 0x15, 0x80, 0x0e, 0x19, 0xfc, 0xc5,
            0x3b, 0x83, 0x79, 0xed, 0x05, 0xee, 0x35, 0xc8, 0x25, 0x67, 0x09, 0x55, 0x83, 0xfd,
            0x90, 0xff, 0x30, 0x35,
        ],
        [
            0xbb, 0xf7, 0x61, 0x82, 0x48, 0x35, 0x4c, 0xeb, 0x1b, 0xc1, 0xfc, 0x9d, 0xbc, 0x42,
            0xc4, 0x26, 0xa4, 0xe2, 0xc1, 0xe0, 0xd4, 0x43, 0xc5, 0x68, 0x3a, 0x92, 0x56, 0xc6,
            0x2e, 0xcd, 0xc2, 0x6f,
        ],
        [
            0xe5, 0x0a, 0xe7, 0x14, 0x79, 0xfc, 0x8e, 0xc5, 0x69, 0x19, 0x2a, 0x13, 0x07, 0x2e,
            0x01, 0x1a, 0xfc, 0x24, 0x9f, 0x47, 0x1a, 0xf0, 0x95, 0x00, 0xea, 0x39, 0xf7, 0x5d,
            0x0a, 0xf8, 0x56, 0xbf,
        ],
        [
            0xe7, 0x4c, 0x0b, 0x92, 0x20, 0x14, 0x7d, 0xb2, 0xd5, 0x0a, 0x3b, 0x58, 0xd4, 0x13,
            0x77, 0x5d, 0x16, 0xc9, 0x84, 0x69, 0x0b, 0xe7, 0xd9, 0x0f, 0x0b, 0xc4, 0x3d, 0x99,
            0xdb, 0xa1, 0xb6, 0x89,
        ],
        [
            0x29, 0x32, 0x4a, 0x0a, 0x48, 0xd1, 0x16, 0x57, 0xa5, 0x1b, 0xa0, 0x8b, 0x00, 0x48,
            0x79, 0xbf, 0xcf, 0xc6, 0x6a, 0x1a, 0xcb, 0x7c, 0xe3, 0x6d, 0xfe, 0x47, 0x8d, 0x26,
            0x55, 0x48, 0x4b, 0x48,
        ],
        [
            0x88, 0x95, 0x2e, 0x3d, 0x0a, 0xc0, 0x6c, 0xb1, 0x6b, 0x66, 0x52, 0x01, 0x12, 0x22,
            0x49, 0x65, 0x9a, 0x22, 0x32, 0x5e, 0x01, 0xc8, 0x70, 0xf4, 0x9e, 0x29, 0xda, 0x6b,
            0x17, 0x57, 0xe0, 0x82,
        ],
        [
            0xcd, 0xf8, 0x79, 0xf2, 0x43, 0x5b, 0x95, 0xaf, 0x04, 0x2a, 0x3b, 0xf7, 0xb8, 0x50,
            0xf7, 0x81, 0x92, 0x46, 0xc8, 0x05, 0x28, 0x58, 0x03, 0xd6, 0x7f, 0xfb, 0xf4, 0xf2,
            0x95, 0xbe, 0xd0, 0x04,
        ],
        [
            0xe0, 0x05, 0xe3, 0x24, 0x20, 0x0b, 0x4f, 0x42, 0x8c, 0x62, 0xbc, 0x33, 0x31, 0xe6,
            0x95, 0xc3, 0x73, 0x60, 0x7c, 0xd0, 0xfa, 0xa9, 0x79, 0x03, 0x41, 0xfa, 0x3b, 0xa1,
            0xed, 0x22, 0x8b, 0xc5,
        ],
        [
            0x35, 0x44, 0x47, 0x72, 0x7a, 0xa9, 0xa5, 0x3d, 0xd8, 0x34, 0x5b, 0x6b, 0x6c, 0x69,
            0x34, 0x43, 0xe5, 0x6e, 0xf4, 0xae, 0xba, 0x13, 0xc4, 0x10, 0x17, 0x9f, 0xc8, 0x58,
            0x9e, 0x77, 0x33, 0xd5,
        ],
        [
            0xda, 0x52, 0xdd, 0xa9, 0x1f, 0x28, 0x29, 0xc1, 0x5c, 0x0e, 0x58, 0xd2, 0x9a, 0x95,
            0x36, 0x0b, 0x86, 0xab, 0x30, 0xcf, 0x0c, 0xac, 0x81, 0x01, 0x83, 0x2a, 0x29, 0xf3,
            0x8c, 0x31, 0x85, 0xf1,
        ],
        [
            0xc7, 0xda, 0x78, 0x14, 0xe2, 0x28, 0xe1, 0x14, 0x44, 0x11, 0xd7, 0x8b, 0x53, 0x60,
            0x92, 0xfe, 0x92, 0x0b, 0xcd, 0xfc, 0xc3, 0x6c, 0xf1, 0x9d, 0x12, 0x59, 0x04, 0x7b,
            0x26, 0x7d, 0x58, 0xb5,
        ],
        [
            0xab, 0xa1, 0xf6, 0x8b, 0x6c, 0x2b, 0x4d, 0xb6, 0xcc, 0x06, 0xa7, 0x34, 0x0e, 0x12,
            0x31, 0x3c, 0x4b, 0x4a, 0x4e, 0xa6, 0xde, 0xb1, 0x7d, 0xeb, 0x3e, 0x1e, 0x66, 0xcd,
            0x8e, 0xac, 0xf3, 0x2b,
        ],
        [
            0xc1, 0x60, 0xae, 0x4f, 0x64, 0xab, 0x76, 0x4d, 0x86, 0x4a, 0x52, 0xad, 0x5e, 0x33,
            0x12, 0x6c, 0x4b, 0x5c, 0xe1, 0x05, 0xa4, 0x7d, 0xee, 0xdd, 0x75, 0xbc, 0x70, 0x19,
            0x9a, 0x52, 0x47, 0xef,
        ],
        [
            0xea, 0xdf, 0x23, 0xfc, 0x99, 0xd5, 0x14, 0xdd, 0x8e, 0xa2, 0x04, 0xd2, 0x23, 0xe9,
            0x8d, 0xa9, 0x88, 0x83, 0x1f, 0x9b, 0x5d, 0x19, 0x40, 0x27, 0x4c, 0xa5, 0x20, 0xb7,
            0xfb, 0x17, 0x3d, 0x8a,
        ],
        [
            0x5b, 0x8e, 0x14, 0xfa, 0xca, 0xc8, 0xa7, 0xc7, 0xa3, 0xbf, 0xee, 0x8b, 0xae, 0x71,
            0xf2, 0xf7, 0x79, 0x3d, 0x3a, 0xd5, 0xfe, 0x33, 0x83, 0xf9, 0x3a, 0xb6, 0x06, 0x1f,
            0x2a, 0x11, 0xbb, 0x02,
        ],
    ];

    #[test]
    fn empty_roots() {
        for i in 0..EMPTY_ROOTS.len() {
            println!("computed    root: {:?}", hex::encode(EMPTY_ROOTS[i]));
            println!("precomputed root: {:?}", hex::encode(HEX_EMPTY_ROOTS[i]));

            assert_eq!(EMPTY_ROOTS[i], HEX_EMPTY_ROOTS[i]);
        }
    }

    #[test]
    fn incremental_roots() {
        // From https://github.com/zcash/zcash/blob/master/src/test/data/merkle_commitments.json
        // Byte-reversed (?) from those ones because the original test vectors are loaded using uint256S()
        let commitments = [
            "bab6e8992959caf0ca94847c36b4e648a7f88a9b9c6a62ea387cf1fb9badfd62",
            "43c9a4b21555b832a79fc12ce27a97d4f4eca1638e7161a780db1d5ebc35eb68",
            "fb92a6142315bb3396b693222bf2d0e260b448cda74e189063cf774048456083",
            "e44a57cd544018937680d385817be3a3e35bb5b87ceeea93d536ea95828a4992",
            "43f48bfb9ab6f12ef91ce83e8f9190ce5dff2721784c90e08a50a67403367cff",
            "fce910561c3c7ebf14ed5d712e6838cdc6f1145c87eec256b7181f9df6d0c468",
            "b1e7016392805b227b11e58ba629f9a6684a0b4c34306e85e47548c43ecd168b",
            "2d9a49d9425449a449cc62d16febaf9c7f8b32349752ecc39191c36130b4c050",
            "53969b31a862b893dde857b8b7d4f53ce0e2c21a0f70d48ba1aef3a05fddff70",
            "17f8fabd440fdf9e2eafd75a3407e8bbde048d2d2232cd803d5763004af61ed8",
            "9b7805cb5e8ef337c13c73cab58ee719bf33a4a80ecc161bfe714269eca4928b",
            "a3ebada94d4329899ae136391604799d8cea39c0c331f9aaaa4a1e73ab63e904",
            "12091a20c9ebe67c2793bb71a6fdddb0ffe3ca781fcf1e192428161f186c3fbe",
            "e9c65749638df548b8909c0ea1d0f79079a6bb3235c649a8806322c87f968018",
            "8e8fddf0438a4263bc926fcfa6733dc201633959f294103533a2cb9328bb65c4",
            "206a202bd08dd31f77afc7114b17850192b83948cff5828df0d638cbe734c884",
        ];

        // From https://github.com/zcash/zcash/blob/master/src/test/data/merkle_roots.json
        let roots = [
            "95bf71d8e803b8601c14b5949d0f92690181154ef9d82eb3e24852266823317a",
            "73f18d3f9cd11010aa01d4f444039e566f14ef282109df9649b2eb75e7a53ed1",
            "dcde8a273c9672bee1a894d7f7f4abb81078f52b498e095f2a87d0aec5addf25",
            "4677d481ec6d1e97969afbc530958d1cbb4f1c047af6fdad4687cd10830e02bd",
            "74cd9d82de30c4222a06d420b75522ae1273729c1d8419446adf1184df61dc69",
            "2ff57f5468c6afdad30ec0fb6c2cb67289f12584e2c20c4e0065f66748697d77",
            "27e4ce010670801911c5765a003b15f75cde31d7378bd36540f593c8a44b3011",
            "62231ef2ec8c4da461072871ab7bc9de10253fcb40e164ddbad05b47e0b7fb69",
            "733a4ce688fdf07efb9e9f5a4b2dafff87cfe198fbe1dff71e028ef4cdee1f1b",
            "df39ed31924facdd69a93db07311d45fceac7a4987c091648044f37e6ecbb0d2",
            "87795c069bdb55281c666b9cb872d13174334ce135c12823541e9536489a9107",
            "438c80f532903b283230446514e400c329b29483db4fe9e279fdfc79e8f4347d",
            "08afb2813eda17e94aba1ab28ec191d4af99283cd4f1c5a04c0c2bc221bc3119",
            "a8b3ab3284f3288f7caa21bd2b69789a159ab4188b0908825b34723305c1228c",
            "db9b289e620de7dca2ae8fdac96808752e32e7a2c6d97ce0755dcebaa03123ab",
            "0bf622cb9f901b7532433ea2e7c1b7632f5935899b62dcf897a71551997dc8cc",
        ];

        let mut leaves = vec![];

        for (i, cm) in commitments.iter().enumerate() {
            let mut bytes = [0u8; 32];
            let _ = hex::decode_to_slice(cm, &mut bytes);
            leaves.push(NoteCommitment::from(bytes));

            let tree = NoteCommitmentTree::from(leaves.clone());

            assert_eq!(hex::encode(tree.hash()), roots[i]);
        }
    }
}
