# Seeds for failure cases proptest has generated in the past. It is
# automatically read and these particular cases re-run before any
# novel cases are generated.
#
# It is recommended to check this file in to source control so that
# everyone who runs the test benefits from these saved cases.
cc 1fcf1e08caccdafad9c9f51c46cd24b992cf7207f55cae605a54830868527baa # shrinks to header = BlockHeader { previous_block_hash: block::Hash("0000000000000000000000000000000000000000000000000000000000000000"), merkle_root_hash: MerkleTreeRootHash([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), final_sapling_root_hash: SaplingNoteTreeRootHash([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), time: 1969-12-31T23:59:59Z, bits: 0, nonce: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], solution: EquihashSolution("000000000000000000000128fd6ffe028bf9b8e789cf2bf69845f52fddda4066064dd798670fd27ca39ab1a3a363ccd3aab31a6e3aaf168095acafbf6a95f01a651d0c1b799a8c3134838b78de78c7128b4280136f544792764a739e3f152e92a79e849d87db179f8aa6d565b5c9c5cb60f92acd669254c0a454ecc0d74d05e21135f5f9445dd18755bc2bd2af041ba3f903e22ceccf729825b382e95b0d90b6a8657645395caa9041a93e904505c762f57ed042cb8e3b69a7fbee5bb8d174fabd95fbae8e7c01e8ecfe69d32d3954c8bdf75f8a292b08358a74d67a63599c9c97a2af237cfe0a14fbe21d73676a097706836f31bfac1e269e050e8cd95ffa04f24553206df40b559ba59078053a19ca20e51fde2ed9bf3a6f2d64e50985abdb59843738296438fd1e0223f1bac8525f42ccbb8ca128436fd5fb936bf5819b2469334d2082120bcdd62e6b800bb64124dd7472e1a8fc14d8e022a4195ff7be3b93deb24f5cf2c54015fd3ba008d035f57c991dae92eb6ad4ddae0e115ab4bd1f36350688d1bbe44574dcf53f158ab3d2747764b5bbf962d66570ef2b25d9cca5dcca7c692c33d0999f916ec0c4f87816797fdb7d38152110008470755ccd74552d498962297c7f99e4a59aface18dfb626bd106043932d70ccb97aa17152cf2da8d30f252cdb42883376ab048f94b376b9f844a412900a41bb63e11af1ea6cb0387646665cb067ada754335c66f499008bf836a3ee08330e4cef1c8218c0af52cadb7caf11e970737f2b684409921969e5be75a3b3328a98528f1d5af263ba33555a9df47f055f5698ce5f02827e08ec56e17bca426e16ea75474be0c68a02c22a1a095821019e293d79d2cb39baea9d190b9c07b9c2961a1b87a20ca3b6bc078cd7f928062d37b4f39b43057196079a71148ea1c5ce60c78711d314e021dc378c00a66eb4190b19b1804241b01a2bb9577ea4532f31ed3b76772e91313fd2639d1ba0e238035fc1a1dfe3f83caa7b82a9fddbbf15cbf6266ab824bcbfbdd7d8684a1002aaa96d234f5bacc124b7df180fd743d9108848f2cd38fdd96493353b31cac694fba0f502fe8410659fdf77a3774959a3579e66eebe8a190361b7abbd5f761b8b5b3fc78f4f146b3ffb08560589d7d2e12d279f7720e0b4bf72dd396d8628e1a335c2260af81198b32345da6cae3f93f734f7faa8d7a025130443260c8dc0a3640256315839570a9745f3dd4c75a3dcac9ff7b0dd081e072dd2337e3461078ba09c51c477e4e0f64bdf3cf898df0e8add9f94618993242a147e3aa7a879fe8ced8b0e6421c700376757c32c5df309d45b986ea28733a5519f3b1b501951bbad2c4d4dc823b05233a6c957bdd336f74bc803d5cb6b001681eac90e4ce1ee1766419b2f2a1024d81b03c21699d61b0faeeba6325d429c5f338de675a9c0ebd2ef75f4ccd6fd0b46232368c8b59d574be2cf1c7ea01a5fd3f8f30f268ba858a0910bee8ce4345028a6e471fce6f28b98ae64b9609c8235adebd8cca87462cae60349bc4b61a8a86071025d0f6f314a8a00cd98bd2680e19441bdc124722ddc64833d29b26fb5c34819d6315fc05e4c362dd13e3221f78e251869abdf26d728ba0896897348a07407d5822928e724987998101a6d00e39c125b7b0d22f43aed8b7f15080b4d0fa056454392466bcd27e56d7d49dd35a86e0337c0bfb5efb14e3ebf353ee57d6631437881e42ed3da531737d6266550ea4a6ced3f9b53523e6233e95a8b5fa730d321b1618cb67488f82c6fe2b17b6483910e25cc7b6df22560694a185bea249d29ac0699edba45038713077589a3b3058e1a4bf4579f4b224dbe01e1e017c268dafde88a89e9cb29f999b8870ce704275e24861613188555") }
