[package]
# Crate metadata
name = "zebrad"
version = "2.2.0"
authors = ["Zcash Foundation <zebra@zfnd.org>"]
description = "The Zcash Foundation's independent, consensus-compatible implementation of a Zcash node"
license = "MIT OR Apache-2.0"
repository = "https://github.com/ZcashFoundation/zebra"

readme = "../README.md"
homepage = "https://zfnd.org/zebra/"
# crates.io is limited to 5 keywords and categories
keywords = ["zebra", "zcash"]
# Must be one of <https://crates.io/category_slugs>
categories = ["command-line-utilities", "cryptography::cryptocurrencies"]

# Settings that impact compilation
edition = "2021"

# Zebra is only supported on the latest stable Rust version. See the README for details.
# Any Zebra release can break compatibility with older Rust versions.
rust-version = "1.81.0"

# Settings that impact runtime behaviour

# make `cargo run` use `zebrad` by default
# when run in the workspace directory
default-run = "zebrad"

# `cargo release` settings
[package.metadata.release]
pre-release-replacements = [
  {file="../book/src/user/install.md", search="git checkout [a-z0-9\\.-]+", replace="git checkout v{{version}}"},
  {file="../book/src/user/install.md", search="--tag [a-z0-9\\.-]+", replace="--tag v{{version}}"},
  {file="../book/src/user/docker.md", search="--branch [a-z0-9\\.-]+", replace="--branch v{{version}}"},
]

[package.metadata.docs.rs]

# Publish Zebra's supported production and developer features on docs.rs.
# (Except for the log level features, because there are a lot of them.)
#
# <https://docs.rs/about/metadata>
features = [
    "default-release-binaries",
    "filter-reload",
    "flamegraph",
    "journald",
    "prometheus",
    "sentry",
    "indexer",
    "getblocktemplate-rpcs"
]

[features]
# In release builds, don't compile debug logging code, to improve performance.
default = ["release_max_level_info", "progress-bar", "getblocktemplate-rpcs"]

# Default features for official ZF binary release builds
default-release-binaries = ["default", "sentry"]

# Production features that activate extra dependencies, or extra features in dependencies

# Indexer support
indexer = ["zebra-rpc/indexer-rpcs", "zebra-state/indexer"]

# Mining RPC support
getblocktemplate-rpcs = [
    "zebra-rpc/getblocktemplate-rpcs",
    "zebra-consensus/getblocktemplate-rpcs",
    "zebra-state/getblocktemplate-rpcs",
    "zebra-node-services/getblocktemplate-rpcs",
    "zebra-chain/getblocktemplate-rpcs",
]

# Experimental internal miner support
internal-miner = [
    "thread-priority",
    "zebra-chain/internal-miner",
    # TODO: move common code into zebra-chain or zebra-node-services and remove the RPC dependency
    "zebra-rpc/internal-miner",
    "zebra-rpc/getblocktemplate-rpcs",
]

# Experimental elasticsearch indexing
elasticsearch = [
    "zebra-state/elasticsearch",
]

# Tracing and monitoring
sentry = ["dep:sentry"]
journald = ["tracing-journald"]
filter-reload = ["hyper", "http-body-util", "hyper-util", "bytes"]

progress-bar = [
    "howudoin",
    "indicatif",
    "zebra-consensus/progress-bar",
    "zebra-state/progress-bar",
    "zebra-network/progress-bar",
]

prometheus = ["metrics-exporter-prometheus"]

# Production features that modify dependency behaviour

# Enable additional error debugging in release builds
error-debug = ["color-eyre/track-caller", "color-eyre/capture-spantrace"]

# Remove verbose logging at compile-time in release or all builds.
#
# Release builds are defined as "cfg(not(debug_assertions))".
# https://docs.rs/tracing/latest/tracing/level_filters/index.html#compile-time-filters
release_max_level_warn = ["tracing/release_max_level_warn"]
release_max_level_info = ["tracing/release_max_level_info", "log/release_max_level_info"]
release_max_level_debug = ["tracing/release_max_level_debug"]

max_level_warn = ["tracing/max_level_warn"]
max_level_info = ["tracing/max_level_info"]
max_level_debug = ["tracing/max_level_debug", "log/max_level_debug"]

# Testing features that activate extra dependencies
flamegraph = ["tracing-flame", "inferno"]

proptest-impl = [
    "proptest",
    "proptest-derive",
    "zebra-consensus/proptest-impl",
    "zebra-state/proptest-impl",
    "zebra-network/proptest-impl",
    "zebra-chain/proptest-impl",
]

# Build the zebra-checkpoints utility for checkpoint generation tests
zebra-checkpoints = [
    "zebra-utils/zebra-checkpoints",
]

# The gRPC tests also need an installed lightwalletd binary
lightwalletd-grpc-tests = ["tonic-build"]

# tokio-console support
#
# To activate this feature, run:
# ```sh
# RUSTFLAGS="--cfg tokio_unstable" cargo build --no-default-features --features="tokio-console" --bin zebrad
# ```
#
# The console-subscriber is incompatible with the tracing/max_level_* features.
#
# For more details, see:
# https://github.com/tokio-rs/console/blob/main/console-subscriber/README.md#enabling-tokio-instrumentation
tokio-console = ["console-subscriber"]

# TODO: replace with environmental variables that skip the tests when not set (part of #2995)
test_sync_to_mandatory_checkpoint_mainnet = []
test_sync_to_mandatory_checkpoint_testnet = []
test_sync_past_mandatory_checkpoint_mainnet = []
test_sync_past_mandatory_checkpoint_testnet = []

[dependencies]
zebra-chain = { path = "../zebra-chain", version = "1.0.0-beta.45" }
zebra-consensus = { path = "../zebra-consensus", version = "1.0.0-beta.45" }
zebra-network = { path = "../zebra-network", version = "1.0.0-beta.45" }
zebra-node-services = { path = "../zebra-node-services", version = "1.0.0-beta.45", features = ["rpc-client"] }
zebra-rpc = { path = "../zebra-rpc", version = "1.0.0-beta.45" }
zebra-state = { path = "../zebra-state", version = "1.0.0-beta.45" }

# Required for crates.io publishing, but it's only used in tests
zebra-utils = { path = "../zebra-utils", version = "1.0.0-beta.45", optional = true }

abscissa_core = { workspace = true }
clap = { workspace = true, features = ["cargo"] }
chrono = { workspace = true, features = ["clock", "std"] }
humantime-serde = { workspace = true }
indexmap = { workspace = true }
lazy_static = { workspace = true }
semver = { workspace = true }
serde = { workspace = true, features = ["serde_derive"] }
toml = { workspace = true }

futures = { workspace = true }
rayon = { workspace = true }
tokio = { workspace = true, features = ["time", "rt-multi-thread", "macros", "tracing", "signal"] }
tokio-stream = { workspace = true, features = ["time"] }
tower = { workspace = true, features = ["hedge", "limit"] }
pin-project = { workspace = true }

color-eyre = { workspace = true, features = ["issue-url"] }
# This is a transitive dependency via color-eyre.
# Enable a feature that makes tinyvec compile much faster.
tinyvec = { workspace = true, features = ["rustc_1_55"] }

thiserror = { workspace = true }

tracing-subscriber = { workspace = true, features = ["env-filter"] }
tracing-appender = { workspace = true }
tracing-error = { workspace = true }
tracing-futures = { workspace = true }
tracing = { workspace = true }

metrics = { workspace = true }

dirs = { workspace = true }
atty = { workspace = true }

num-integer = { workspace = true }
rand = { workspace = true }

# prod feature internal-miner
thread-priority = { workspace = true, optional = true }

# prod feature sentry
sentry = { workspace = true, features = ["backtrace", "contexts", "reqwest", "rustls", "tracing"], optional = true }

# prod feature flamegraph
tracing-flame = { workspace = true, optional = true }
inferno = { workspace = true, optional = true }

# prod feature journald
tracing-journald = { workspace = true, optional = true }

# prod feature filter-reload
hyper = { workspace = true, features = ["http1", "http2", "server"], optional = true }
http-body-util = { workspace = true, optional = true }
hyper-util = { workspace = true, optional = true }
bytes = { workspace = true, optional = true }

# prod feature prometheus
metrics-exporter-prometheus = { workspace = true, features = ["http-listener"], optional = true }

# prod feature release_max_level_info
#
# zebrad uses tracing for logging,
# we only use `log` to set and print the static log levels in transitive dependencies
log = { workspace = true }

# prod feature progress-bar
howudoin = { workspace = true, features = ["term-line"], optional = true }
indicatif = { workspace = true, optional = true }

# test feature proptest-impl
proptest = { workspace = true, optional = true }
proptest-derive = { workspace = true, optional = true }

# test feature tokio-console
console-subscriber = { workspace = true, optional = true }

[build-dependencies]
vergen = { workspace = true, features = ["cargo", "git", "git2", "rustc"] }

# test feature lightwalletd-grpc-tests
tonic-build = { workspace = true, optional = true }

[dev-dependencies]
abscissa_core = { workspace = true, features = ["testing"] }
hex = { workspace = true }
hex-literal = { workspace = true }
jsonrpsee-types = { workspace = true }
once_cell = { workspace = true }
regex = { workspace = true }
insta = { workspace = true, features = ["json"] }

# zebra-rpc needs the preserve_order feature, it also makes test results more stable
serde_json = { workspace = true, features = ["preserve_order"] }
tempfile = { workspace = true }

hyper = { workspace = true, features = ["http1", "http2", "server"] }
tracing-test = { workspace = true, features = ["no-env-filter"] }

tokio = { workspace = true, features = ["full", "tracing", "test-util"] }
tokio-stream = { workspace = true }

# test feature lightwalletd-grpc-tests
prost = { workspace = true }
tonic = { workspace = true }

proptest = { workspace = true }
proptest-derive = { workspace = true }

# enable span traces and track caller in tests
color-eyre = { workspace = true }

zebra-chain = { path = "../zebra-chain", version = "1.0.0-beta.45", features = ["proptest-impl"] }
zebra-consensus = { path = "../zebra-consensus", version = "1.0.0-beta.45", features = ["proptest-impl"] }
zebra-network = { path = "../zebra-network", version = "1.0.0-beta.45", features = ["proptest-impl"] }
zebra-state = { path = "../zebra-state", version = "1.0.0-beta.45", features = ["proptest-impl"] }

zebra-test = { path = "../zebra-test", version = "1.0.0-beta.45" }
zebra-grpc = { path = "../zebra-grpc", version = "0.1.0-alpha.12" }

# Used by the checkpoint generation tests via the zebra-checkpoints feature
# (the binaries in this crate won't be built unless their features are enabled).
#
# Currently, we use zebra-utils/tests/build_utils_for_zebrad_tests.rs as a workaround
# to build the zebra-checkpoints utility for the zebrad acceptance tests.
#
# When `-Z bindeps` is stabilised, enable this binary dependency instead:
# https://github.com/rust-lang/cargo/issues/9096
# zebra-utils { path = "../zebra-utils", artifact = "bin:zebra-checkpoints" }
zebra-utils = { path = "../zebra-utils", version = "1.0.0-beta.45" }

[lints.rust]
unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
