use std::net::SocketAddr;

use proptest::{arbitrary::any, collection::vec, prelude::*};

use super::{MetaAddr, MetaAddrChange, PeerServices};

use zebra_chain::serialization::{arbitrary::canonical_socket_addr, DateTime32};

/// The largest number of random changes we want to apply to a MetaAddr
///
/// This should be at least twice the number of [`PeerAddrState`]s, so
/// the tests can cover multiple transitions through every state.
pub const MAX_ADDR_CHANGE: usize = 15;

impl MetaAddr {
    /// Returns a strategy which generates arbitrary gossiped `MetaAddr`s.
    pub fn gossiped_strategy() -> BoxedStrategy<Self> {
        (
            canonical_socket_addr(),
            any::<PeerServices>(),
            any::<DateTime32>(),
        )
            .prop_map(|(address, services, untrusted_last_seen)| {
                MetaAddr::new_gossiped_meta_addr(address, services, untrusted_last_seen)
            })
            .boxed()
    }

    /// Returns a strategy which generates arbitrary [`MetaAddrChange::NewAlternate`]s.
    pub fn alternate_change_strategy() -> BoxedStrategy<MetaAddrChange> {
        canonical_socket_addr()
            .prop_map(|address| MetaAddr::new_alternate(&address, &PeerServices::NODE_NETWORK))
            .boxed()
    }
}

impl MetaAddrChange {
    /// Returns a strategy which generates changes for `socket_addr`.
    ///
    /// `socket_addr` is typically generated by the `canonical_socket_addr`
    /// strategy.
    pub fn addr_strategy(addr: SocketAddr) -> BoxedStrategy<Self> {
        any::<MetaAddrChange>()
            .prop_map(move |mut change| {
                change.set_addr(addr);
                change
            })
            .boxed()
    }

    /// Returns a strategy which generates a `MetaAddr`, and a vector of up to
    /// `max_addr_change` changes.
    ///
    /// The address and the changes all have matching `SocketAddr`s.
    pub fn addr_changes_strategy(
        max_addr_change: usize,
    ) -> BoxedStrategy<(MetaAddr, Vec<MetaAddrChange>)> {
        any::<MetaAddr>()
            .prop_flat_map(move |addr| {
                (
                    Just(addr),
                    vec(MetaAddrChange::addr_strategy(addr.addr), 1..max_addr_change),
                )
            })
            .boxed()
    }
}
