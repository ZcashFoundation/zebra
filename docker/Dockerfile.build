# This steps implement cargo-chef for docker layer caching
# We are using four stages:
# - chef: installs cargo-chef
# - planner: computes the recipe file
# - builder: caches our dependencies and builds the binary
# - runtime: is our runtime environment
FROM rust:bullseye as chef
RUN cargo install cargo-chef
WORKDIR /app

FROM chef AS planner
COPY . .
RUN cargo chef prepare  --recipe-path recipe.json

FROM chef AS builder
COPY --from=planner /app/recipe.json recipe.json

RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    llvm libclang-dev clang ca-certificates && \
    rm -Rf /var/lib/apt/lists/* /tmp/*

# Optimize builds. In particular, regenerate-stateful-test-disks.yml was reaching the
# GitHub Actions time limit (6 hours), so we needed to make it faster.
ENV RUSTFLAGS -O
# Build dependencies - this is the caching Docker layer!
RUN cargo chef cook --release --features enable-sentry --recipe-path recipe.json

# Build zebra
ARG SHORT_SHA
ENV SHORT_SHA $SHORT_SHA
ARG RUST_BACKTRACE
ENV RUST_BACKTRACE ${RUST_BACKTRACE:-full}
# Skip test on debian based OS by default as compilation fails
ARG ZEBRA_SKIP_NETWORK_TESTS
ENV ZEBRA_SKIP_NETWORK_TESTS ${ZEBRA_SKIP_NETWORK_TESTS:-1}

ENV CARGO_HOME /app/.cargo/
# Build and then compile tests
# Compile, but don't run tests (--no-run). Add verbosity and colors
COPY . .
RUN cargo build --release --features enable-sentry --bin zebrad
RUN cargo test --release --features enable-sentry --workspace --no-run

# Runner image
FROM debian:bullseye-slim AS runtime

RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    ca-certificates

COPY --from=builder /app/target/release/zebrad /usr/local/bin

ARG CHECKPOINT_SYNC=true
ARG NETWORK=Mainnet

RUN set -ex; \
  { \
    echo "[consensus]"; \
    echo "checkpoint_sync = ${CHECKPOINT_SYNC}"; \
    echo "[metrics]"; \
    echo "endpoint_addr = '0.0.0.0:9999'"; \
    echo "[network]"; \
    echo "network = '${NETWORK}'"; \
    echo "[state]"; \
    echo "cache_dir = '/zebrad-cache'"; \
    echo "[tracing]"; \
    echo "endpoint_addr = '0.0.0.0:3000'"; \
  } > "zebrad.toml"

RUN cat zebrad.toml

# Pre-download Zcash Sprout and Sapling parameters
RUN /usr/local/bin/zebrad download

EXPOSE 3000 8233 18233

ARG RUST_LOG
ENV RUST_LOG ${RUST_LOG:-info}
ARG RUST_BACKTRACE
ENV RUST_BACKTRACE ${RUST_BACKTRACE:-1}
ARG SENTRY_DSN
ENV SENTRY_DSN ${SENTRY_DSN}

CMD [ "/usr/local/bin/zebrad", "-c", "zebrad.toml", "start" ]
