name: Test lightwalletd

on:
  workflow_dispatch:
    inputs:
      network:
        default: 'Mainnet'
        description: 'Network to deploy: Mainnet or Testnet'
        required: true
      regenerate-disks:
        type: boolean
        default: false
        description: 'Just update lightwalletd stateful disks'
        required: true
  pull_request:
    branches:
      - main
    paths:
      # code and tests
      - '**/*.rs'
      # hard-coded checkpoints and proptest regressions
      - '**/*.txt'
      # test data snapshots
      - '**/*.snap'
      # dependencies
      - '**/Cargo.toml'
      - '**/Cargo.lock'
      # workflow definitions
      - 'docker/**'
      - '.github/workflows/test-lightwalletd.yml'

  push:
    branches:
      - main
    paths:
      # code and tests
      - '**/*.rs'
      # hard-coded checkpoints and proptest regressions
      - '**/*.txt'
      # test data snapshots
      - '**/*.snap'
      # dependencies
      - '**/Cargo.toml'
      - '**/Cargo.lock'
      # workflow definitions
      - 'docker/**'
      - '.github/workflows/test-lightwalletd.yml'

env:
  ZEBRA_TEST_LIGHTWALLETD: '1'
  NETWORK: Mainnet
  PROJECT_ID: zealous-zebra
  GAR_BASE: us-docker.pkg.dev/zealous-zebra/zebra
  REGION: us-central1
  ZONE: us-central1-a
  MACHINE_TYPE: c2d-standard-4

jobs:
  build:
    uses: ./.github/workflows/docker-image-build.yml
    with:
      dockerfile_path: ./docker/Dockerfile
      dockerfile_target: tester
      image_name: lightwalletd-test
      network: Mainnet
      checkpoint_sync: true
      rust_backtrace: full
      rust_lib_backtrace: full
      colorbt_show_hidden: '1'
      zebra_skip_ipv6_tests: '1'
      rust_log: info
  # Test launching lightwalletd with an empty lightwalletd and Zebra state
  test-lightwalletd-integration:
    name: Test integration with lightwalletd
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.event.inputs.regenerate-disks != 'true' }}
    steps:
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4
        with:
          short-length: 7

      - name: Run tests with empty lightwalletd launch
        run: |
          docker pull ${{ env.GAR_BASE }}/lightwalletd-test:sha-${{ env.GITHUB_SHA_SHORT }}
          docker run -e ZEBRA_TEST_LIGHTWALLETD --name lightwalletd-test -t ${{ env.GAR_BASE }}/lightwalletd-test:sha-${{ env.GITHUB_SHA_SHORT }} cargo test --locked --release --features enable-sentry --test acceptance -- --nocapture lightwalletd_integration

  lightwalletd-rpc-test:
    name: Test lightwalletd RPC with a Zebra tip state
    runs-on: ubuntu-latest
    needs: [build]
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - uses: actions/checkout@v3.0.2
        with:
          persist-credentials: false

      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4
        with:
          short-length: 7

      - name: Downcase network name for disks
        run: |
          NETWORK_CAPS=${{ github.event.inputs.network || env.NETWORK }}
          echo "NETWORK=${NETWORK_CAPS,,}" >> $GITHUB_ENV

      # Setup gcloud CLI
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v0.7.1
        with:
          workload_identity_provider: 'projects/143793276228/locations/global/workloadIdentityPools/github-actions/providers/github-oidc'
          service_account: 'github-service-account@zealous-zebra.iam.gserviceaccount.com'
          token_format: 'access_token'

      # Check if our destination compute instance exists and delete it
      - name: Delete existing instance with same SHA
        run: |
          INSTANCE=$(gcloud compute instances list --filter=lwd-rpc-call-${{ env.GITHUB_REF_SLUG_URL }}-${{ env.GITHUB_SHA_SHORT }} --format='value(NAME)')
          if [ -z "${INSTANCE}" ]; then
            echo "No instance to delete"
          else
            gcloud compute instances delete "${INSTANCE}" --zone "${{ env.ZONE }}" --delete-disks all --quiet
          fi

      - name: Get disk state name from gcloud
        id: get-disk-name
        run: |
          ZEBRA_STATE_DISK=$(gcloud compute images list --filter="name~zebrad-cache AND name~-tip" --format="value(NAME)" --sort-by=~creationTimestamp --limit=1)
          echo "Disk: $ZEBRA_STATE_DISK"
          echo "Description: $(gcloud compute images describe $ZEBRA_STATE_DISK --format='value(DESCRIPTION)')"

          echo "ZEBRA_CACHED_DISK_NAME=$ZEBRA_STATE_DISK" >> $GITHUB_ENV

      # Creates Compute Engine virtual machine instance w/ disks
      - name: Create GCP compute instance
        run: |
          gcloud compute instances create-with-container "lwd-rpc-call-${{ env.GITHUB_REF_SLUG_URL }}-${{ env.GITHUB_SHA_SHORT }}" \
          --boot-disk-size 100GB \
          --boot-disk-type pd-ssd \
          --create-disk image=${{ env.ZEBRA_CACHED_DISK_NAME }},name="lwd-rpc-call-${{ env.ZEBRA_CACHED_DISK_NAME }}-${{ env.GITHUB_SHA_SHORT }}",device-name="lwd-rpc-call-${{ env.ZEBRA_CACHED_DISK_NAME }}-${{ env.GITHUB_SHA_SHORT }}",size=100GB,type=pd-ssd \
          --container-mount-disk mount-path="${{ env.ZEBRA_CACHED_STATE_DIR_VAR }}",name="lwd-rpc-call-${{ env.ZEBRA_CACHED_DISK_NAME }}-${{ env.GITHUB_SHA_SHORT }}" \
          --container-image ${{ env.GAR_BASE }}/lightwalletd-test:sha-${{ env.GITHUB_SHA_SHORT }} \
          --container-restart-policy=never \
          --container-stdin \
          --container-tty \
          --container-env=TEST_LWD_RPC_SYNC=1,ZEBRA_TEST_LIGHTWALLETD=${{ env.ZEBRA_TEST_LIGHTWALLETD }},ZEBRA_FORCE_USE_COLOR=1,ZEBRA_CACHED_STATE_DIR_VAR=${{ env.ZEBRA_CACHED_STATE_DIR_VAR }} \
          --machine-type ${{ env.MACHINE_TYPE }} \
          --scopes cloud-platform \
          --metadata=google-monitoring-enabled=true,google-logging-enabled=true \
          --tags zebrad \
          --zone "${{ env.ZONE }}"
        env:
          ZEBRA_CACHED_STATE_DIR_VAR: '/root/.cache/zebrad-cache'
          LIGHTWALLETD_DATA_DIR_VAR: '/root/.cache/lightwalletd'

      # TODO: this approach is very messy, but getting the just created container name is very error prone and GCP doesn't have a workaround for this without requiring a TTY
      # This TODO relates to the following issues:
      # https://github.com/actions/runner/issues/241
      # https://www.googlecloudcommunity.com/gc/Infrastructure-Compute-Storage/SSH-into-Compute-Container-not-easily-possible/td-p/170915
      #
      # Deploying a zebra container might take more than 30 seconds to completely start, so we're adding a timer at the end
      # of this step before starting the following ones
      - name: Get container name from logs
        run: |
          INSTANCE_ID=$(gcloud compute instances describe lwd-rpc-call-${{ env.GITHUB_REF_SLUG_URL }}-${{ env.GITHUB_SHA_SHORT }} --zone ${{ env.ZONE }} --format='value(id)')
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

          CONTAINER_NAME=""
          while [[ ${CONTAINER_NAME} != *"lwd-rpc-call-${{ env.GITHUB_REF_SLUG_URL }}-${{ env.GITHUB_SHA_SHORT }}"* ]]; do
              CONTAINER_NAME=$(gcloud logging read 'log_name=projects/${{ env.PROJECT_ID }}/logs/cos_system AND jsonPayload.MESSAGE:lwd-rpc-call-${{ env.GITHUB_REF_SLUG_URL }}-${{ env.GITHUB_SHA_SHORT }}' --format='value(jsonPayload.MESSAGE)' --limit=1 | grep -o '...-lwd-rpc-call-${{ env.GITHUB_REF_SLUG_URL }}-${{ env.GITHUB_SHA_SHORT }}-....' | tr -d "'.")
              echo "Using container: ${CONTAINER_NAME} from instance: ${INSTANCE_ID}"
              sleep 10
          done

          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
          echo "CONTAINER_NAME=$CONTAINER_NAME" >> $GITHUB_ENV
          sleep 90

      - name: Test LWD getblock RPC call with a Zebra tip state
        id: lwd-rpc-call
        run: |
          for RETRY in 1 2 3 4; do
              gcloud compute ssh \
              lwd-rpc-call-${{ env.GITHUB_REF_SLUG_URL }}-${{ env.GITHUB_SHA_SHORT }} \
              --zone ${{ env.ZONE }} \
              --quiet \
              --ssh-flag="-o ServerAliveInterval=15" \
              --command="docker logs --follow ${{ env.CONTAINER_NAME }}" \
              || echo "ssh disconnected $RETRY times"
          done

          EXIT_CODE=$(\
          gcloud compute ssh \
          lwd-rpc-call-${{ env.GITHUB_REF_SLUG_URL }}-${{ env.GITHUB_SHA_SHORT }} \
          --zone ${{ env.ZONE }} \
          --quiet \
          --ssh-flag="-o ServerAliveInterval=5" \
          --command="docker wait ${{ env.CONTAINER_NAME }}")

          exit ${EXIT_CODE}

      - name: Delete test instance
        # Do not delete the instance if the sync timeouts in GitHub
        if: ${{ steps.lwd-rpc-call.outcome == 'success' || steps.lwd-rpc-call.outcome == 'failure' }}
        continue-on-error: true
        run: |
          gcloud compute instances delete "lwd-rpc-call-${{ env.GITHUB_REF_SLUG_URL }}-${{ env.GITHUB_SHA_SHORT }}" --zone "${{ env.ZONE }}" --delete-disks all --quiet

  # Test full sync of lightwalletd with a Zebra tip state
  lightwalletd-transactions-test:
    name: Test lightwalletd transactions with a Zebra tip state
    runs-on: ubuntu-latest
    needs: [build]
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - uses: actions/checkout@v3.0.2
        with:
          persist-credentials: false

      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4
        with:
          short-length: 7

      - name: Downcase network name for disks
        run: |
          NETWORK_CAPS=${{ github.event.inputs.network || env.NETWORK }}
          echo "NETWORK=${NETWORK_CAPS,,}" >> $GITHUB_ENV

      # Setup gcloud CLI
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v0.7.1
        with:
          workload_identity_provider: 'projects/143793276228/locations/global/workloadIdentityPools/github-actions/providers/github-oidc'
          service_account: 'github-service-account@zealous-zebra.iam.gserviceaccount.com'
          token_format: 'access_token'

      # Check if our destination compute instance exists and delete it
      - name: Delete existing instance with same SHA
        run: |
          INSTANCE=$(gcloud compute instances list --filter=lwd-transactions-${{ env.GITHUB_REF_SLUG_URL }}-${{ env.GITHUB_SHA_SHORT }} --format='value(NAME)')
          if [ -z "${INSTANCE}" ]; then
            echo "No instance to delete"
          else
            gcloud compute instances delete "${INSTANCE}" --zone "${{ env.ZONE }}" --delete-disks all --quiet
          fi

      - name: Get disk state name from gcloud
        id: get-disk-name
        run: |
          ZEBRA_STATE_DISK=$(gcloud compute images list --filter="name~zebrad-cache AND name~-tip" --format="value(NAME)" --sort-by=~creationTimestamp --limit=1)
          echo "Disk: $ZEBRA_STATE_DISK"
          echo "Description: $(gcloud compute images describe $ZEBRA_STATE_DISK --format='value(DESCRIPTION)')"

          echo "ZEBRA_CACHED_DISK_NAME=$ZEBRA_STATE_DISK" >> $GITHUB_ENV

      # Creates Compute Engine virtual machine instance w/ disks
      - name: Create GCP compute instance
        run: |
          gcloud compute instances create-with-container "lwd-transactions-${{ env.GITHUB_REF_SLUG_URL }}-${{ env.GITHUB_SHA_SHORT }}" \
          --boot-disk-size 100GB \
          --boot-disk-type pd-ssd \
          --create-disk image=${{ env.ZEBRA_CACHED_DISK_NAME }},name="lwd-transactions-${{ env.ZEBRA_CACHED_DISK_NAME }}-${{ env.GITHUB_SHA_SHORT }}",device-name="lwd-transactions-${{ env.ZEBRA_CACHED_DISK_NAME }}-${{ env.GITHUB_SHA_SHORT }}",size=100GB,type=pd-ssd \
          --container-mount-disk mount-path="${{ env.ZEBRA_CACHED_STATE_DIR_VAR }}",name="lwd-transactions-${{ env.ZEBRA_CACHED_DISK_NAME }}-${{ env.GITHUB_SHA_SHORT }}" \
          --container-image ${{ env.GAR_BASE }}/lightwalletd-test:sha-${{ env.GITHUB_SHA_SHORT }} \
          --container-restart-policy=never \
          --container-stdin \
          --container-tty \
          --container-env=TEST_LWD_TRANSACTIONS=1,ZEBRA_TEST_LIGHTWALLETD=${{ env.ZEBRA_TEST_LIGHTWALLETD }},ZEBRA_FORCE_USE_COLOR=1,ZEBRA_CACHED_STATE_DIR_VAR=${{ env.ZEBRA_CACHED_STATE_DIR_VAR }},LIGHTWALLETD_DATA_DIR_VAR=${{ env.LIGHTWALLETD_DATA_DIR_VAR }} \
          --machine-type ${{ env.MACHINE_TYPE }} \
          --scopes cloud-platform \
          --metadata=google-monitoring-enabled=true,google-logging-enabled=true \
          --tags zebrad \
          --zone "${{ env.ZONE }}"
        env:
          ZEBRA_CACHED_STATE_DIR_VAR: '/root/.cache/zebra'

      # TODO: this approach is very messy, but getting the just created container name is very error prone and GCP doesn't have a workaround for this without requiring a TTY
      # This TODO relates to the following issues:
      # https://github.com/actions/runner/issues/241
      # https://www.googlecloudcommunity.com/gc/Infrastructure-Compute-Storage/SSH-into-Compute-Container-not-easily-possible/td-p/170915
      #
      # Deploying a zebra container might take more than 30 seconds to completely start, so we're adding a timer at the end
      # of this step before starting the following ones
      - name: Get container name from logs
        run: |
          INSTANCE_ID=$(gcloud compute instances describe lwd-transactions-${{ env.GITHUB_REF_SLUG_URL }}-${{ env.GITHUB_SHA_SHORT }} --zone ${{ env.ZONE }} --format='value(id)')
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

          CONTAINER_NAME=""
          while [[ ${CONTAINER_NAME} != *"lwd-transactions-${{ env.GITHUB_REF_SLUG_URL }}-${{ env.GITHUB_SHA_SHORT }}"* ]]; do
              CONTAINER_NAME=$(gcloud logging read 'log_name=projects/${{ env.PROJECT_ID }}/logs/cos_system AND jsonPayload.MESSAGE:lwd-transactions-${{ env.GITHUB_REF_SLUG_URL }}-${{ env.GITHUB_SHA_SHORT }}' --format='value(jsonPayload.MESSAGE)' --limit=1 | grep -o '...-lwd-transactions-${{ env.GITHUB_REF_SLUG_URL }}-${{ env.GITHUB_SHA_SHORT }}-....' | tr -d "'.")
              echo "Using container: ${CONTAINER_NAME} from instance: ${INSTANCE_ID}"
              sleep 10
          done

          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
          echo "CONTAINER_NAME=$CONTAINER_NAME" >> $GITHUB_ENV
          sleep 90

      - name: Test sending transactions using LWD with a Zebra tip state
        id: lwd-transactions
        run: |
          for RETRY in 1 2 3 4; do
              gcloud compute ssh \
              lwd-transactions-${{ env.GITHUB_REF_SLUG_URL }}-${{ env.GITHUB_SHA_SHORT }} \
              --zone ${{ env.ZONE }} \
              --quiet \
              --ssh-flag="-o ServerAliveInterval=15" \
              --command="docker logs --follow ${{ env.CONTAINER_NAME }}" \
              || echo "ssh disconnected $RETRY times"
          done

          EXIT_CODE=$(\
          gcloud compute ssh \
          lwd-transactions-${{ env.GITHUB_REF_SLUG_URL }}-${{ env.GITHUB_SHA_SHORT }} \
          --zone ${{ env.ZONE }} \
          --quiet \
          --ssh-flag="-o ServerAliveInterval=5" \
          --command="docker wait ${{ env.CONTAINER_NAME }}")

          exit ${EXIT_CODE}

      - name: Delete test instance
        # Do not delete the instance if the sync timeouts in GitHub
        if: ${{ steps.lwd-transactions.outcome == 'success' || steps.lwd-transactions.outcome == 'failure' }}
        continue-on-error: true
        run: |
          gcloud compute instances delete "lwd-transactions-${{ env.GITHUB_REF_SLUG_URL }}-${{ env.GITHUB_SHA_SHORT }}" --zone "${{ env.ZONE }}" --delete-disks all --quiet


  # Test full sync of lightwalletd with a Zebra tip state
  lightwalletd-full-sync:
    name: Test lightwalletd full sync
    runs-on: ubuntu-latest
    needs: [build]
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - uses: actions/checkout@v3.0.2
        with:
          persist-credentials: false

      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4
        with:
          short-length: 7

      - name: Downcase network name for disks
        run: |
          NETWORK_CAPS=${{ github.event.inputs.network || env.NETWORK }}
          echo "NETWORK=${NETWORK_CAPS,,}" >> $GITHUB_ENV

      # Setup gcloud CLI
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v0.7.1
        with:
          workload_identity_provider: 'projects/143793276228/locations/global/workloadIdentityPools/github-actions/providers/github-oidc'
          service_account: 'github-service-account@zealous-zebra.iam.gserviceaccount.com'
          token_format: 'access_token'

      # Check if our destination compute instance exists and delete it
      - name: Delete existing instance with same SHA
        run: |
          INSTANCE=$(gcloud compute instances list --filter=lwd-full-sync-${{ env.GITHUB_REF_SLUG_URL }}-${{ env.GITHUB_SHA_SHORT }} --format='value(NAME)')
          if [ -z "${INSTANCE}" ]; then
            echo "No instance to delete"
          else
            gcloud compute instances delete "${INSTANCE}" --zone "${{ env.ZONE }}" --delete-disks all --quiet
          fi

      - name: Get disk state name from gcloud
        id: get-disk-name
        run: |
          ZEBRA_STATE_DISK=$(gcloud compute images list --filter="name~zebrad-cache AND name~-tip" --format="value(NAME)" --sort-by=~creationTimestamp --limit=1)
          echo "Disk: $ZEBRA_STATE_DISK"
          echo "Description: $(gcloud compute images describe $ZEBRA_STATE_DISK --format='value(DESCRIPTION)')"

          echo "ZEBRA_CACHED_DISK_NAME=$ZEBRA_STATE_DISK" >> $GITHUB_ENV

      # Creates Compute Engine virtual machine instance w/ disks
      - name: Create GCP compute instance
        run: |
          gcloud compute instances create-with-container "lwd-full-sync-${{ env.GITHUB_REF_SLUG_URL }}-${{ env.GITHUB_SHA_SHORT }}" \
          --boot-disk-size 100GB \
          --boot-disk-type pd-ssd \
          --create-disk image=${{ env.ZEBRA_CACHED_DISK_NAME }},name="lwd-full-sync-${{ env.ZEBRA_CACHED_DISK_NAME }}-${{ env.GITHUB_SHA_SHORT }}",device-name="lwd-full-sync-${{ env.ZEBRA_CACHED_DISK_NAME }}-${{ env.GITHUB_SHA_SHORT }}",size=100GB,type=pd-ssd \
          --container-mount-disk mount-path="${{ env.ZEBRA_CACHED_STATE_DIR_VAR }}",name="lwd-full-sync-${{ env.ZEBRA_CACHED_DISK_NAME }}-${{ env.GITHUB_SHA_SHORT }}" \
          --create-disk name="lwd-cache-${{ env.GITHUB_REF_SLUG_URL }}-${{ env.GITHUB_SHA_SHORT }}-tip",device-name="lwd-cache-${{ env.GITHUB_REF_SLUG_URL }}-${{ env.GITHUB_SHA_SHORT }}-tip",size=100GB,type=pd-ssd \
          --container-mount-disk mount-path="${{ env.LIGHTWALLETD_DATA_DIR_VAR }}",name="lwd-cache-${{ env.GITHUB_REF_SLUG_URL }}-${{ env.GITHUB_SHA_SHORT }}-tip" \
          --container-image ${{ env.GAR_BASE }}/lightwalletd-test:sha-${{ env.GITHUB_SHA_SHORT }} \
          --container-restart-policy=never \
          --container-stdin \
          --container-tty \
          --container-env=TEST_LWD_FULL_SYNC=1,ZEBRA_TEST_LIGHTWALLETD=${{ env.ZEBRA_TEST_LIGHTWALLETD }},ZEBRA_FORCE_USE_COLOR=1,ZEBRA_CACHED_STATE_DIR_VAR=${{ env.ZEBRA_CACHED_STATE_DIR_VAR }},LIGHTWALLETD_DATA_DIR_VAR=${{ env.LIGHTWALLETD_DATA_DIR_VAR }} \
          --machine-type ${{ env.MACHINE_TYPE }} \
          --scopes cloud-platform \
          --metadata=google-monitoring-enabled=true,google-logging-enabled=true \
          --tags zebrad \
          --zone "${{ env.ZONE }}"
        env:
          ZEBRA_CACHED_STATE_DIR_VAR: '/root/.cache/zebra'
          LIGHTWALLETD_DATA_DIR_VAR: '/root/.cache/lightwalletd'

      # TODO: this approach is very messy, but getting the just created container name is very error prone and GCP doesn't have a workaround for this without requiring a TTY
      # This TODO relates to the following issues:
      # https://github.com/actions/runner/issues/241
      # https://www.googlecloudcommunity.com/gc/Infrastructure-Compute-Storage/SSH-into-Compute-Container-not-easily-possible/td-p/170915
      #
      # Deploying a zebra container might take more than 30 seconds to completely start, so we're adding a timer at the end
      # of this step before starting the following ones
      - name: Get container name from logs
        run: |
          INSTANCE_ID=$(gcloud compute instances describe lwd-full-sync-${{ env.GITHUB_REF_SLUG_URL }}-${{ env.GITHUB_SHA_SHORT }} --zone ${{ env.ZONE }} --format='value(id)')
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

          CONTAINER_NAME=""
          while [[ ${CONTAINER_NAME} != *"lwd-full-sync-${{ env.GITHUB_REF_SLUG_URL }}-${{ env.GITHUB_SHA_SHORT }}"* ]]; do
              CONTAINER_NAME=$(gcloud logging read 'log_name=projects/${{ env.PROJECT_ID }}/logs/cos_system AND jsonPayload.MESSAGE:lwd-full-sync-${{ env.GITHUB_REF_SLUG_URL }}-${{ env.GITHUB_SHA_SHORT }}' --format='value(jsonPayload.MESSAGE)' --limit=1 | grep -o '...-lwd-full-sync-${{ env.GITHUB_REF_SLUG_URL }}-${{ env.GITHUB_SHA_SHORT }}-....' | tr -d "'.")
              echo "Using container: ${CONTAINER_NAME} from instance: ${INSTANCE_ID}"
              sleep 10
          done

          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
          echo "CONTAINER_NAME=$CONTAINER_NAME" >> $GITHUB_ENV
          sleep 90

      - name: Test LWD full sync with a Zebra tip state
        id: lwd-full-sync
        run: |
          for RETRY in 1 2 3 4; do
              gcloud compute ssh \
              lwd-full-sync-${{ env.GITHUB_REF_SLUG_URL }}-${{ env.GITHUB_SHA_SHORT }} \
              --zone ${{ env.ZONE }} \
              --quiet \
              --ssh-flag="-o ServerAliveInterval=15" \
              --command="docker logs --follow ${{ env.CONTAINER_NAME }}" \
              || echo "ssh disconnected $RETRY times"
          done

          EXIT_CODE=$(\
          gcloud compute ssh \
          lwd-full-sync-${{ env.GITHUB_REF_SLUG_URL }}-${{ env.GITHUB_SHA_SHORT }} \
          --zone ${{ env.ZONE }} \
          --quiet \
          --ssh-flag="-o ServerAliveInterval=5" \
          --command="docker wait ${{ env.CONTAINER_NAME }}")

          exit ${EXIT_CODE}

      - name: Delete test instance
        # Do not delete the instance if the sync timeouts in GitHub
        if: ${{ steps.lwd-full-sync.outcome == 'success' || steps.lwd-full-sync.outcome == 'failure' }}
        continue-on-error: true
        run: |
          gcloud compute instances delete "lwd-full-sync-${{ env.GITHUB_REF_SLUG_URL }}-${{ env.GITHUB_SHA_SHORT }}" --zone "${{ env.ZONE }}" --delete-disks all --quiet

      # Create image from disk
      # Force the image creation as the disk is still attached, even though is not being used by the container
      - name: Create image from state disk
        run: |
          gcloud compute images create lwd-cache-${{ env.GITHUB_REF_SLUG_URL }}-${{ env.GITHUB_SHA_SHORT }}-v${{ env.STATE_VERSION }}-${{ env.NETWORK }}-tip \
          --force \
          --source-disk=lwd-cache-${{ env.GITHUB_REF_SLUG_URL }}-${{ env.GITHUB_SHA_SHORT }}-tip \
          --source-disk-zone=${{ env.ZONE }} \
          --storage-location=us \
          --description="Created from commit ${{ env.GITHUB_SHA_SHORT }} with height ${{ env.SYNC_HEIGHT }}"

      - name: Delete test instance
        # Do not delete the instance if the sync timeouts in GitHub
        if: ${{ steps.lwd-full-sync.outcome == 'success' || steps.lwd-full-sync.outcome == 'failure' }}
        continue-on-error: true
        run: |
          gcloud compute instances delete "lwd-full-sync-${{ env.GITHUB_REF_SLUG_URL }}-${{ env.GITHUB_SHA_SHORT }}" --zone "${{ env.ZONE }}" --delete-disks all --quiet

  # Test update sync of lightwalletd with a lightwalletd and Zebra tip state
  lightwalletd-update-sync:
    name: Test lightwalletd update
    runs-on: ubuntu-latest
    needs: [build]
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - uses: actions/checkout@v3.0.2
        with:
          persist-credentials: false

      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4
        with:
          short-length: 7

      - name: Downcase network name for disks
        run: |
          NETWORK_CAPS=${{ github.event.inputs.network || env.NETWORK }}
          echo "NETWORK=${NETWORK_CAPS,,}" >> $GITHUB_ENV

      # Setup gcloud CLI
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v0.7.1
        with:
          workload_identity_provider: 'projects/143793276228/locations/global/workloadIdentityPools/github-actions/providers/github-oidc'
          service_account: 'github-service-account@zealous-zebra.iam.gserviceaccount.com'
          token_format: 'access_token'

      # Check if our destination compute instance exists and delete it
      - name: Delete existing instance with same SHA
        run: |
          INSTANCE=$(gcloud compute instances list --filter=lwd-update-sync-${{ env.GITHUB_REF_SLUG_URL }}-${{ env.GITHUB_SHA_SHORT }} --format='value(NAME)')
          if [ -z "${INSTANCE}" ]; then
            echo "No instance to delete"
          else
            gcloud compute instances delete "${INSTANCE}" --zone "${{ env.ZONE }}" --delete-disks all --quiet
          fi

      - name: Get disk state name from gcloud
        id: get-disk-name
        run: |
          ZEBRA_STATE_DISK=$(gcloud compute images list --filter="name~zebrad-cache AND name~-tip" --format="value(NAME)" --sort-by=~creationTimestamp --limit=1)
          echo "Disk: $ZEBRA_STATE_DISK"
          echo "Description: $(gcloud compute images describe $ZEBRA_STATE_DISK --format='value(DESCRIPTION)')"

          echo "ZEBRA_CACHED_DISK_NAME=$ZEBRA_STATE_DISK" >> $GITHUB_ENV

          LWD_STATE_DISK=$(gcloud compute images list --filter="name~zebrad-cache AND name~-tip" --format="value(NAME)" --sort-by=~creationTimestamp --limit=1)
          echo "Disk: $LWD_STATE_DISK"
          echo "Description: $(gcloud compute images describe $LWD_STATE_DISK --format='value(DESCRIPTION)')"

          echo "LWD_CACHED_DISK_NAME=$LWD_STATE_DISK" >> $GITHUB_ENV

      # Creates Compute Engine virtual machine instance w/ disks
      - name: Create GCP compute instance
        run: |
          gcloud compute instances create-with-container "lwd-update-sync-${{ env.GITHUB_REF_SLUG_URL }}-${{ env.GITHUB_SHA_SHORT }}" \
          --boot-disk-size 100GB \
          --boot-disk-type pd-ssd \
          --create-disk image=${{ env.ZEBRA_CACHED_DISK_NAME }},name="lwd-update-sync-${{ env.ZEBRA_CACHED_DISK_NAME }}-${{ env.GITHUB_SHA_SHORT }}",device-name="lwd-update-sync-${{ env.ZEBRA_CACHED_DISK_NAME }}-${{ env.GITHUB_SHA_SHORT }}",size=100GB,type=pd-ssd \
          --container-mount-disk mount-path="${{ env.ZEBRA_CACHED_STATE_DIR_VAR }}",name="lwd-update-sync-${{ env.ZEBRA_CACHED_DISK_NAME }}-${{ env.GITHUB_SHA_SHORT }}" \
          --create-disk name="lwd-update-sync-${{ env.LWD_CACHED_DISK_NAME }}-${{ env.GITHUB_SHA_SHORT }}",device-name="lwd-update-sync-${{ env.LWD_CACHED_DISK_NAME }}-${{ env.GITHUB_SHA_SHORT }}",size=100GB,type=pd-ssd \
          --container-mount-disk mount-path="${{ env.LIGHTWALLETD_DATA_DIR_VAR }}",name="lwd-update-sync-${{ env.LWD_CACHED_DISK_NAME }}-${{ env.GITHUB_SHA_SHORT }}" \
          --container-image ${{ env.GAR_BASE }}/lightwalletd-test:sha-${{ env.GITHUB_SHA_SHORT }} \
          --container-restart-policy=never \
          --container-stdin \
          --container-tty \
          --container-env=TEST_LWD_UPDATE_SYNC=1,ZEBRA_TEST_LIGHTWALLETD=${{ env.ZEBRA_TEST_LIGHTWALLETD }},ZEBRA_FORCE_USE_COLOR=1,ZEBRA_CACHED_STATE_DIR_VAR=${{ env.ZEBRA_CACHED_STATE_DIR_VAR }},LIGHTWALLETD_DATA_DIR_VAR=${{ env.LIGHTWALLETD_DATA_DIR_VAR }} \
          --machine-type ${{ env.MACHINE_TYPE }} \
          --scopes cloud-platform \
          --metadata=google-monitoring-enabled=true,google-logging-enabled=true \
          --tags zebrad \
          --zone "${{ env.ZONE }}"
        env:
          ZEBRA_CACHED_STATE_DIR_VAR: '/root/.cache/zebra'
          LIGHTWALLETD_DATA_DIR_VAR: '/root/.cache/lightwalletd'

      # TODO: this approach is very messy, but getting the just created container name is very error prone and GCP doesn't have a workaround for this without requiring a TTY
      # This TODO relates to the following issues:
      # https://github.com/actions/runner/issues/241
      # https://www.googlecloudcommunity.com/gc/Infrastructure-Compute-Storage/SSH-into-Compute-Container-not-easily-possible/td-p/170915
      #
      # Deploying a zebra container might take more than 30 seconds to completely start, so we're adding a timer at the end
      # of this step before starting the following ones
      - name: Get container name from logs
        run: |
          INSTANCE_ID=$(gcloud compute instances describe lwd-update-sync-${{ env.GITHUB_REF_SLUG_URL }}-${{ env.GITHUB_SHA_SHORT }} --zone ${{ env.ZONE }} --format='value(id)')
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

          CONTAINER_NAME=""
          while [[ ${CONTAINER_NAME} != *"lwd-update-sync-${{ env.GITHUB_REF_SLUG_URL }}-${{ env.GITHUB_SHA_SHORT }}"* ]]; do
              CONTAINER_NAME=$(gcloud logging read 'log_name=projects/${{ env.PROJECT_ID }}/logs/cos_system AND jsonPayload.MESSAGE:lwd-update-sync-${{ env.GITHUB_REF_SLUG_URL }}-${{ env.GITHUB_SHA_SHORT }}' --format='value(jsonPayload.MESSAGE)' --limit=1 | grep -o '...-lwd-update-sync-${{ env.GITHUB_REF_SLUG_URL }}-${{ env.GITHUB_SHA_SHORT }}-....' | tr -d "'.")
              echo "Using container: ${CONTAINER_NAME} from instance: ${INSTANCE_ID}"
              sleep 10
          done

          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
          echo "CONTAINER_NAME=$CONTAINER_NAME" >> $GITHUB_ENV
          sleep 90

      - name: Test LWD update sync with a Zebra tip state
        id: lwd-update-sync-
        run: |
          for RETRY in 1 2 3 4; do
              gcloud compute ssh \
              lwd-update-sync-${{ env.GITHUB_REF_SLUG_URL }}-${{ env.GITHUB_SHA_SHORT }} \
              --zone ${{ env.ZONE }} \
              --quiet \
              --ssh-flag="-o ServerAliveInterval=15" \
              --command="docker logs --follow ${{ env.CONTAINER_NAME }}" \
              || echo "ssh disconnected $RETRY times"
          done

          EXIT_CODE=$(\
          gcloud compute ssh \
          lwd-update-sync-${{ env.GITHUB_REF_SLUG_URL }}-${{ env.GITHUB_SHA_SHORT }} \
          --zone ${{ env.ZONE }} \
          --quiet \
          --ssh-flag="-o ServerAliveInterval=5" \
          --command="docker wait ${{ env.CONTAINER_NAME }}")

          exit ${EXIT_CODE}
