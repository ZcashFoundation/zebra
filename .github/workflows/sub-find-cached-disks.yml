name: Check if cached state disks exist

on:
  workflow_call:
    inputs:
      network:
        description: 'The Zcash network used to look up the disks'
        required: true
        type: string
    outputs:
      lwd_tip_disk:
        description: 'true if there is a lightwalletd and Zebra cached state disk, synced near the chain tip'
        value: ${{ jobs.get-available-disks.outputs.lwd_tip_disk }}
      zebra_tip_disk:
        description: 'true if there is a Zebra cached state disk synced near the chain tip'
        value: ${{ jobs.get-available-disks.outputs.zebra_tip_disk }}
      zebra_checkpoint_disk:
        description: 'true if there is a Zebra cached state disk synced to the mandatory Zebra checkpoint'
        value: ${{ jobs.get-available-disks.outputs.zebra_checkpoint_disk }}

jobs:
  get-available-disks:
    name: Check if cached state disks exist
    runs-on: ubuntu-latest
    outputs:
      lwd_tip_disk: ${{ steps.get-available-disks.outputs.lwd_tip_disk }}
      zebra_tip_disk: ${{ steps.get-available-disks.outputs.zebra_tip_disk }}
      zebra_checkpoint_disk: ${{ steps.get-available-disks.outputs.zebra_checkpoint_disk }}
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - uses: actions/checkout@v4.1.1
        with:
          persist-credentials: false
          fetch-depth: 0

      # Setup gcloud CLI
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v1.1.1
        with:
          retries: '3'
          workload_identity_provider: '${{ vars.GCP_WIF }}'
          service_account: '${{ vars.GCP_DEPLOYMENTS_SA }}'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1.1.1

      # Disk images in GCP are required to be in lowercase, but the blockchain network
      # uses sentence case, so we need to downcase ${{ inputs.network }}
      #
      # Passes a lowercase Network name to subsequent steps using $NETWORK env variable
      - name: Downcase network name for disks
        run: |
          NETWORK_CAPS=${{ inputs.network }}
          echo "NETWORK=${NETWORK_CAPS,,}" >> $GITHUB_ENV

      # Check if there are cached state disks available for subsequent jobs to use.
      #
      # This lookup uses the state version from constants.rs.
      # It accepts disks generated by any branch, including draft and unmerged PRs.
      #
      # If the disk exists, sets the corresponding output to "true":
      # - lwd_tip_disk
      # - zebra_tip_disk
      # - zebra_checkpoint_disk
      # TODO evaluate if ${{ toJSON(false) }} can be used inside an external script to move this logic out of the workflow
      - name: Check if cached state disks exist
        id: get-available-disks
        run: |
          LOCAL_STATE_VERSION=$(grep -oE "DATABASE_FORMAT_VERSION: .* [0-9]+" "${GITHUB_WORKSPACE}/zebra-state/src/constants.rs" | grep -oE "[0-9]+" | tail -n1)
          echo "STATE_VERSION: ${LOCAL_STATE_VERSION}"

          # Function to find a disk image and output its name
          find_disk_image() {
            local base_name="${1}"
            local disk_type="${2}"
            local disk_pattern="${base_name}-cache"
            local output_var="${base_name}_${disk_type}_disk"
            local disk_image

            disk_image=$(gcloud compute images list --filter="status=READY AND name~${disk_pattern}-.+-[0-9a-f]+-v${LOCAL_STATE_VERSION}-${NETWORK}-${disk_type}" --format="value(NAME)" --sort-by=~creationTimestamp --limit=1)

            if [[ -z "${disk_image}" ]]; then
              echo "No ${disk_type^^} disk found for ${base_name} on network: ${NETWORK}"
              echo "${output_var}=${{ toJSON(false) }}" >> "${GITHUB_OUTPUT}"
              echo JSON false: "${{ toJSON(false) }}"
            else
              echo "Disk: ${disk_image}"
              echo "${output_var}=${{ toJSON(true) }}" >> "${GITHUB_OUTPUT}"
              echo JSON true: "${{ toJSON(false) }}"
            fi
          }

          # Find and output LWD and Zebra disks
          find_disk_image "lwd" "tip"
          find_disk_image "zebrad" "tip"
          find_disk_image "zebrad" "checkpoint"
