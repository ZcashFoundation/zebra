name: Test Crate Build

on:
  pull_request:
    branches: [main]
    paths:
      - "**/*.rs"
      - "**/Cargo.toml"
      - "**/Cargo.lock"
      - .cargo/config.toml
      - "**/clippy.toml"
      - .github/workflows/test-crate-build.yml

  push:
    branches: [main]
    paths:
      - "**/*.rs"
      - "**/Cargo.toml"
      - "**/Cargo.lock"
      - .cargo/config.toml
      - "**/clippy.toml"
      - .github/workflows/test-crate-build.yml

  workflow_dispatch:

# Ensures that only one workflow task will run at a time. Previous builds, if
# already in process, will get cancelled. Only the latest commit will be allowed
# to run, cancelling any workflows in between
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: read

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUST_LIB_BACKTRACE: 1
  RUST_LOG: info
  COLORBT_SHOW_HIDDEN: 1

jobs:
  matrix:
    name: Generate crates matrix
    permissions:
      statuses: write
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 #v5.0.0
        with:
          persist-credentials: false

      - uses: actions-rust-lang/setup-rust-toolchain@ab6845274e2ff01cd4462007e1a9d9df1ab49f42 #v1.14.0
        with:
          toolchain: stable
          cache-on-failure: true

      # This step dynamically creates a JSON containing the values of each crate
      # available in this repo in the root directory. We use `cargo tree` to accomplish this task.
      #
      # The result from `cargo tree` is then sorted so the longest job (zebrad) runs first,
      # transformed to JSON values between double quotes, and separated by commas,
      # then added to a `crates.txt`.
      #
      # A JSON object is created and assigned to a $MATRIX variable, which is used to create an
      # output named `matrix`, which is then used as the input in following steps,
      # using ` ${{ fromJson(needs.matrix.outputs.matrix) }}`
      - id: set-matrix
        name: Dynamically build crates JSON
        run: |
          TEMP_DIR=$(mktemp -d)
          cargo tree --depth 0 --edges no-normal,no-dev,no-build,no-proc-macro --prefix none | cut -d ' ' -f1 | sed '/^$/d' | LC_ALL=C sort --reverse | awk '{ printf "\"%s\",\n", $0 }' | sed '$ s/.$//' > $TEMP_DIR/crates.txt
          MATRIX=$( (
            echo '{ "crate" : ['
            echo "$(cat $TEMP_DIR/crates.txt)"
            echo " ]}"
          ) | jq -c .)
          echo $MATRIX
          echo $MATRIX | jq .
          echo "matrix=$MATRIX" >> "$GITHUB_OUTPUT"

  build:
    name: Build ${{ matrix.crate }} crate
    permissions:
      id-token: write
      statuses: write
    timeout-minutes: 90
    needs: [matrix]
    # Some of these builds take more than 14GB disk space
    runs-on: ubuntu-latest
    strategy:
      # avoid rate-limit errors by only launching a few of these jobs at a time,
      # but still finish in a similar time to the longest tests
      max-parallel: 4
      fail-fast: true
      matrix: ${{ fromJson(needs.matrix.outputs.matrix) }}

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 #v5.0.0
        with:
          persist-credentials: false

      - uses: actions-rust-lang/setup-rust-toolchain@ab6845274e2ff01cd4462007e1a9d9df1ab49f42 #v1.14.0
        with:
          toolchain: stable
          cache-key: crate-build-${{ matrix.crate }}
          cache-on-failure: true

      - uses: arduino/setup-protoc@c65c819552d16ad3c9b72d9dfd5ba5237b9c906b #v3.0.0
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      # We could use `features: ['', '--all-features', '--no-default-features']` as a matrix argument,
      # but it's faster to run these commands sequentially, so they can re-use the local cargo cache.
      #
      # Some Zebra crates do not have any features, and most don't have any default features.
      # Some targets activate features, but we still need to be able to build without them.
      - name: Build ${{ matrix.crate }} crate with default features
        run: |
          cargo clippy --package ${{ matrix.crate }} -- -D warnings
          cargo build --package ${{ matrix.crate }}

      - name: Build ${{ matrix.crate }} crate with no default features and all targets
        run: |
          cargo clippy --package ${{ matrix.crate }} --no-default-features --all-targets -- -D warnings
          cargo build --package ${{ matrix.crate }} --no-default-features --all-targets

      - name: Build ${{ matrix.crate }} crate with default features and all targets
        run: |
          cargo clippy --package ${{ matrix.crate }} --all-targets -- -D warnings
          cargo build --package ${{ matrix.crate }} --all-targets

      - name: Build ${{ matrix.crate }} crate with all features and all targets
        run: |
          cargo clippy --package ${{ matrix.crate }} --all-features --all-targets -- -D warnings
          cargo build --package ${{ matrix.crate }} --all-features --all-targets

  test-crate-build-success:
    name: test crate build success
    runs-on: ubuntu-latest
    if: always()
    needs:
      - matrix
      - build
    timeout-minutes: 30
    steps:
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@05ac9388f0aebcb5727afa17fcccfecd6f8ec5fe #v1.2.2
        with:
          jobs: ${{ toJSON(needs) }}
